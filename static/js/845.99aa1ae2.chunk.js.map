{"version":3,"file":"static/js/845.99aa1ae2.chunk.js","mappings":"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","sources":["components/Modal.tsx","hooks/modal.ts","store/episodes/actions.ts","store/episodes/selectors.ts","store/seasons/thunks.ts","store/shows/thunks.ts","store/episodes/thunks.ts","store/movies/actions.ts","store/movies/selectors.ts","store/seasons/actions.ts","store/seasons/selectors.ts","store/shows/actions.ts","store/shows/selectors.ts","services/http.ts","types/files/File.ts","services/databases/TMDb/api.ts","services/databases/TMDb/index.ts","services/drives/FTP/index.ts","services/drives/OneDrive/api.ts","services/drives/util.ts","services/drives/OneDrive/util.ts","types/files/Caption.ts","services/drives/OneDrive/index.ts","services/drives/index.tsx","services/indexing.ts","store/thunks.ts"],"sourcesContent":["import './Modal.scss'\nimport React, { FunctionComponent, useRef } from 'react'\nimport classNames from 'classnames'\nimport useOnClickOutside from 'use-onclickoutside'\n\ntype ModalProps = {\n  isActive: boolean\n\n  onClose: () => void\n}\n\nexport const Modal: FunctionComponent<ModalProps> = ({\n  isActive,\n  onClose,\n  children,\n}) => {\n  const modalRef = useRef(null)\n  useOnClickOutside(modalRef, onClose)\n\n  return (\n    <div className={classNames('Modal', { active: isActive })}>\n      <div className=\"Modal__wrapper\" ref={modalRef}>\n        {children}\n      </div>\n    </div>\n  )\n}\n","import { useCallback, useState } from 'react'\n\nexport const useModal = (): [\n  show: boolean,\n  handleOpen: () => void,\n  handleClose: () => void,\n] => {\n  const [show, setShow] = useState(false)\n  const handleOpen = useCallback(() => setShow(true), [setShow])\n  const handleClose = useCallback(() => setShow(false), [setShow])\n\n  return [show, handleOpen, handleClose]\n}\n","import { EpisodesActionTypes, REMOVE_EPISODE, UPDATE_EPISODE } from './types'\nimport { Episode } from '../../types/items/Episode'\n\nexport const updateEpisode = (episode: Episode): EpisodesActionTypes => ({\n  type: UPDATE_EPISODE,\n  payload: { episode },\n})\n\nexport const removeEpisode = (id: string): EpisodesActionTypes => ({\n  type: REMOVE_EPISODE,\n  payload: { id },\n})\n","import { EpisodesState } from './types'\nimport { createSelector } from 'reselect'\n\nexport const episodeSelector = (id: string) => (state: EpisodesState) =>\n  state[id]\n\nexport const episodesSelector = (state: EpisodesState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const episodesBySeasonSelector = (seasonId: string) =>\n  createSelector(episodesSelector, (episodes) =>\n    episodes.filter((episode) => episode.seasonId === seasonId),\n  )\n","import { AppThunk } from '../index'\nimport { Season } from '../../types/items/Season'\nimport { Usage } from '../../types/items/Item'\nimport { showSelector } from '../shows/selectors'\nimport { updateSeason } from './actions'\nimport { updateShowProgress } from '../shows/thunks'\n\nexport const updateSeasonProgress =\n  (season: Season, progress: number): AppThunk<void> =>\n  (dispatch, getState) => {\n    const usage: Usage = {\n      lastWatched: new Date().toISOString(),\n      progress,\n    }\n    dispatch(updateSeason({ ...season, usage }))\n\n    const { shows } = getState()\n    const show = showSelector(season.showId)(shows)\n    if (show === undefined) throw new Error('parent show of season undefined')\n\n    dispatch(updateShowProgress(show, season.number))\n  }\n","import { AppThunk } from '../index'\nimport { Show } from '../../types/items/Show'\nimport { Usage } from '../../types/items/Item'\nimport { updateShow } from './actions'\n\nexport const updateShowProgress =\n  (show: Show, progress: number): AppThunk<void> =>\n  (dispatch) => {\n    const usage: Usage = {\n      lastWatched: new Date().toISOString(),\n      progress,\n    }\n    dispatch(updateShow({ ...show, usage }))\n  }\n","import { AppThunk } from '../index'\nimport { Episode } from '../../types/items/Episode'\nimport { Usage } from '../../types/items/Item'\nimport { seasonSelector } from '../seasons/selectors'\nimport { updateEpisode } from './actions'\nimport { updateSeasonProgress } from '../seasons/thunks'\n\nexport const updateEpisodeProgress =\n  (episode: Episode, progress: number): AppThunk<void> =>\n  (dispatch, getState) => {\n    const usage: Usage = {\n      lastWatched: new Date().toISOString(),\n      progress,\n    }\n    dispatch(updateEpisode({ ...episode, usage }))\n\n    const { seasons } = getState()\n    const season = seasonSelector(episode.seasonId)(seasons)\n    if (season === undefined)\n      throw new Error('parent season of episode undefined')\n\n    dispatch(updateSeasonProgress(season, episode.number))\n  }\n\nexport const removeFilesByProvider =\n  (episode: Episode, providerId: string): AppThunk<void> =>\n  (dispatch) => {\n    dispatch(\n      updateEpisode({\n        ...episode,\n        sources: episode.sources.filter(\n          (source) => source.provider.providerId !== providerId,\n        ),\n        captions: episode.captions.filter(\n          (caption) => caption.provider.providerId !== providerId,\n        ),\n      }),\n    )\n  }\n","import { MoviesActionTypes, REMOVE_MOVIE, UPDATE_MOVIE } from './types'\nimport { Movie } from '../../types/items/Movie'\n\nexport const updateMovie = (movie: Movie): MoviesActionTypes => ({\n  type: UPDATE_MOVIE,\n  payload: { movie },\n})\n\nexport const removeMovie = (id: string): MoviesActionTypes => ({\n  type: REMOVE_MOVIE,\n  payload: { id },\n})\n","import { isInProgress, wasRecentlyWatched } from '../../util'\nimport { Movie } from '../../types/items/Movie'\nimport { MoviesState } from './types'\nimport { Person } from '../../types/items/Person'\nimport { RECENTLY_WATCHED_THRESHOLD } from '../../constants'\nimport { createSelector } from 'reselect'\n\nexport const movieSelector = (id: string) => (state: MoviesState) => state[id]\n\nexport const moviesSelector = (state: MoviesState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const inProgressSelector = (state: MoviesState) =>\n  moviesSelector(state).filter(isInProgress)\n\nexport const recentlyWatchedSelector = (state: MoviesState) =>\n  moviesSelector(state).filter((movie) =>\n    wasRecentlyWatched(movie, RECENTLY_WATCHED_THRESHOLD),\n  )\n\nexport const moviesByPersonSelector = (id: string) =>\n  createSelector(moviesSelector, (movies) =>\n    movies.filter(\n      (movie) =>\n        movie.cast.find((person) => person.id === id) ||\n        movie.crew.find((person) => person.id === id),\n    ),\n  )\n\nexport const moviesPersonSelector = (\n  id: string,\n  fn: (movie: Movie) => Person[],\n) =>\n  createSelector(moviesSelector, (movies) =>\n    movies\n      .map(fn)\n      .reduce((acc, people) => acc.concat(people), [])\n      .filter((person) => person.id === id),\n  )\n","import { REMOVE_SEASON, SeasonsActionTypes, UPDATE_SEASON } from './types'\nimport { Season } from '../../types/items/Season'\n\nexport const updateSeason = (season: Season): SeasonsActionTypes => ({\n  type: UPDATE_SEASON,\n  payload: { season },\n})\n\nexport const removeSeason = (id: string): SeasonsActionTypes => ({\n  type: REMOVE_SEASON,\n  payload: { id },\n})\n","import { isInProgress, wasRecentlyWatched } from '../../util'\nimport { Person } from '../../types/items/Person'\nimport { RECENTLY_WATCHED_THRESHOLD } from '../../constants'\nimport { Season } from '../../types/items/Season'\nimport { SeasonsState } from './types'\nimport { createSelector } from 'reselect'\n\nexport const seasonSelector = (id: string) => (state: SeasonsState) => state[id]\n\nexport const seasonsSelector = (state: SeasonsState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const inProgressSelector = (state: SeasonsState) =>\n  seasonsSelector(state).filter(isInProgress)\n\nexport const recentlyWatchedSelector = (state: SeasonsState) =>\n  seasonsSelector(state).filter((season) =>\n    wasRecentlyWatched(season, RECENTLY_WATCHED_THRESHOLD),\n  )\n\nexport const seasonsByShowSelector = (showId: string) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons.filter((season) => season.showId === showId),\n  )\n\nexport const seasonsByPersonSelector = (id: string) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons.filter(\n      (season) =>\n        season.cast.find((person) => person.id === id) ||\n        season.crew.find((person) => person.id === id),\n    ),\n  )\n\nexport const seasonsPersonSelector = (\n  id: string,\n  fn: (season: Season) => Person[],\n) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons\n      .map(fn)\n      .reduce((acc, people) => acc.concat(people), [])\n      .filter((person) => person.id === id),\n  )\n","import { REMOVE_SHOW, ShowsActionTypes, UPDATE_SHOW } from './types'\nimport { Show } from '../../types/items/Show'\n\nexport const updateShow = (show: Show): ShowsActionTypes => ({\n  type: UPDATE_SHOW,\n  payload: { show },\n})\n\nexport const removeShow = (id: string): ShowsActionTypes => ({\n  type: REMOVE_SHOW,\n  payload: { id },\n})\n","import { ShowsState } from './types'\n\nexport const showSelector = (id: string) => (state: ShowsState) => state[id]\n\nexport const showsSelector = (state: ShowsState) =>\n  Object.keys(state).map((id) => state[id]!)\n","import { APIError } from '../errors/APIError'\n\nenum HttpMethod {\n  GET = 'GET',\n}\n\ntype Params = Record<string, string>\n\nconst buildUrl = (baseUrl: string, path: string, params?: Params) => {\n  const url = new URL(`${baseUrl}/${path}`)\n\n  if (params !== undefined)\n    for (const [key, value] of Object.entries(params))\n      url.searchParams.append(key, value)\n\n  return url\n}\n\nconst http = async <T>(\n  baseUrl: string,\n  path: string,\n  method: HttpMethod,\n  accessToken: string,\n  params?: Params,\n): Promise<T> => {\n  const response = await fetch(buildUrl(baseUrl, path, params).href, {\n    method,\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n\n  // check if response is empty\n  // if empty just return an empty object\n  const text = await response.text()\n  const body = text ? JSON.parse(text) : {}\n\n  if (response.ok) return body\n  else throw new APIError(response.status, response.statusText)\n}\n\nexport const get = <T>(\n  baseUrl: string,\n  path: string,\n  accessToken: string,\n  params: Params,\n) => http<T>(baseUrl, path, HttpMethod.GET, accessToken, params)\n","import { Caption } from './Caption'\nimport { FileProvider } from './FileProvider'\nimport { Video } from './Video'\n\nexport enum FileKind {\n  Video,\n  Caption,\n}\n\nexport interface IFile<T extends FileProvider> {\n  kind: FileKind\n  id: string\n  name: string\n  provider: T\n}\n\nexport type File = Caption | Video\n","import {\n  MovieCreditsResponse,\n  MovieDetailsResponse,\n  SearchMoviesResponse,\n  SearchTVShowsResponse,\n  TVEpisodeResponse,\n  TVSeasonCreditsResponse,\n  TVSeasonDetailsResponse,\n  TVShowDetailsResponse,\n} from './types'\nimport { get } from '../../http'\nimport i18next from 'i18next'\n\nconst BASE_URL = 'https://api.themoviedb.org/3'\nconst ACCESS_TOKEN = process.env.REACT_APP_TMDB_API_READ_ACCESS_TOKEN!\n\nexport const findMovie = async (query: string) => {\n  const { results } = await get<SearchMoviesResponse>(\n    BASE_URL,\n    'search/movie',\n    ACCESS_TOKEN,\n    { language: i18next.language, query },\n  )\n\n  if (results.length === 0) return undefined\n  else return results[0].id\n}\n\nexport const findShow = async (query: string) => {\n  const { results } = await get<SearchTVShowsResponse>(\n    BASE_URL,\n    'search/tv',\n    ACCESS_TOKEN,\n    { language: i18next.language, query },\n  )\n\n  if (results.length === 0) return undefined\n  else return results[0].id\n}\n\nexport const fetchMovie = (id: number) =>\n  get<MovieDetailsResponse>(BASE_URL, `movie/${id}`, ACCESS_TOKEN, {\n    language: i18next.language,\n  })\n\nexport const fetchMovieCredits = (id: number) =>\n  get<MovieCreditsResponse>(BASE_URL, `movie/${id}/credits`, ACCESS_TOKEN, {\n    language: i18next.language,\n  })\n\nexport const fetchShow = (id: number) =>\n  get<TVShowDetailsResponse>(BASE_URL, `tv/${id}`, ACCESS_TOKEN, {\n    language: i18next.language,\n  })\n\nexport const fetchSeason = (showId: number, seasonNumber: number) =>\n  get<TVSeasonDetailsResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}`,\n    ACCESS_TOKEN,\n    { language: i18next.language },\n  )\n\nexport const fetchSeasonCredits = (showId: number, seasonNumber: number) =>\n  get<TVSeasonCreditsResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}/credits`,\n    ACCESS_TOKEN,\n    { language: i18next.language },\n  )\n\nexport const fetchEpisode = (\n  showId: number,\n  seasonNumber: number,\n  episodeNumber: number,\n) =>\n  get<TVEpisodeResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}/episode/${episodeNumber}`,\n    ACCESS_TOKEN,\n    { language: i18next.language },\n  )\n","import { Episode, EpisodeLike } from '../../../types/items/Episode'\nimport { Movie, MovieLike } from '../../../types/items/Movie'\nimport { Season, SeasonLike } from '../../../types/items/Season'\nimport { Show, ShowLike } from '../../../types/items/Show'\nimport { buildEpisode, buildMovie, buildSeason, buildShow } from './util'\nimport {\n  fetchEpisode,\n  fetchMovie,\n  fetchMovieCredits,\n  fetchSeason,\n  fetchSeasonCredits,\n  fetchShow,\n} from './api'\n\nexport const fetchEpisodeMetadata = async (\n  showId: string,\n  seasonId: string,\n  episode: EpisodeLike,\n): Promise<Episode> => {\n  const response = await fetchEpisode(\n    episode.showTmdbId,\n    episode.seasonNumber,\n    episode.number,\n  )\n\n  return buildEpisode(showId, seasonId, episode, response)\n}\n\nexport const fetchMovieMetadata = async (movie: MovieLike): Promise<Movie> => {\n  const response = await fetchMovie(movie.tmdbId)\n  const creditsResponse = await fetchMovieCredits(movie.tmdbId)\n\n  return buildMovie(movie, response, creditsResponse)\n}\n\nexport const fetchSeasonMetadata = async (\n  show: Show,\n  season: SeasonLike,\n): Promise<Season> => {\n  const response = await fetchSeason(season.showTmdbId, season.number)\n  const creditsResponse = await fetchSeasonCredits(\n    season.showTmdbId,\n    season.number,\n  )\n\n  return buildSeason(show, season, response, creditsResponse)\n}\n\nexport const fetchShowMetadata = async (show: ShowLike): Promise<Show> => {\n  const response = await fetchShow(show.tmdbId)\n\n  return buildShow(show, response)\n}\n","// import { fetchItem, fetchItems, getClient } from './api'\nimport { CannotFindFileError } from '../../../errors/CannotFindFileError'\nimport { FTP } from '../../../types/providers/FTP'\nimport { File } from '../../../types/files/File'\nimport {\n  // EpisodeIndexResponse,\n  IndexResponse,\n  // MovieIndexResponse,\n  // SeasonIndexResponse,\n  // ShowIndexResponse,\n} from '../types'\n// import { ProviderKind } from '../../../types/providers/Provider'\n// import { buildFile } from './util'\n// import { notUndefined } from '../../../util'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const updateFile = async (provider: FTP, file: File): Promise<File> => {\n  throw new CannotFindFileError(file)\n\n  // const client = await getClient(\n  //   provider.host,\n  //   provider.port,\n  //   provider.username,\n  //   provider.password,\n  //   provider.secure,\n  // )\n  // const response = await fetchItem(client, file.provider.fileName)\n  // if (response === undefined) throw new CannotFindFileError(file)\n  // if (file.provider.kind !== ProviderKind.FTP)\n  //   throw new Error(\n  //     'Internal error: attempted to update file with the wrong provider.',\n  //   )\n  // const newFile = buildFile(provider.id, file.provider.path)(response)\n\n  // if (newFile !== undefined) return newFile\n  // else throw new CannotFindFileError(file)\n}\n\n// const indexFiles = async (\n//   providerId: string,\n//   client: Client,\n//   path: string,\n// ): Promise<File[]> => {\n//   const filesResponse = await fetchItems(client, path)\n//   return filesResponse.map(buildFile(providerId, path)).filter(notUndefined)\n// }\n\n// const indexMovies = async (\n//   providerId: string,\n//   client: Client,\n//   path: string | undefined,\n// ): Promise<MovieIndexResponse[]> => {\n//   if (path === undefined) return []\n\n//   const moviesResponse = await fetchItems(client, path)\n\n//   return Promise.all(\n//     moviesResponse.map(async (movieResponse) => ({\n//       name: movieResponse.name,\n//       files: await indexFiles(\n//         providerId,\n//         client,\n//         `${path}/${movieResponse.name}`,\n//       ),\n//     })),\n//   )\n// }\n\n// const indexEpisodes = async (\n//   providerId: string,\n//   client: Client,\n//   seasonFolderPath: string,\n// ): Promise<EpisodeIndexResponse[]> => {\n//   const episodesResponse = await fetchItems(client, seasonFolderPath)\n\n//   const episodes = await Promise.all(\n//     episodesResponse.map(async (episodeResponse) => {\n//       const number = Number.parseInt(episodeResponse.name)\n//       if (isNaN(number)) return\n\n//       return {\n//         number,\n//         files: await indexFiles(\n//           providerId,\n//           client,\n//           `${seasonFolderPath}/${episodeResponse.name}`,\n//         ),\n//       }\n//     }),\n//   )\n\n//   return episodes.filter(notUndefined)\n// }\n\n// const indexSeasons = async (\n//   providerId: string,\n//   client: Client,\n//   showFolderPath: string,\n// ): Promise<SeasonIndexResponse[]> => {\n//   const seasonsResponse = await fetchItems(client, showFolderPath)\n\n//   const seasons = await Promise.all(\n//     seasonsResponse.map(async (seasonResponse) => {\n//       const number = Number.parseInt(seasonResponse.name)\n//       if (isNaN(number)) return\n\n//       return {\n//         number,\n//         episodes: await indexEpisodes(\n//           providerId,\n//           client,\n//           `${showFolderPath}/${seasonResponse.name}`,\n//         ),\n//       }\n//     }),\n//   )\n\n//   return seasons.filter(notUndefined)\n// }\n\n// const indexShows = async (\n//   providerId: string,\n//   client: Client,\n//   path: string | undefined,\n// ): Promise<ShowIndexResponse[]> => {\n//   if (path === undefined) return []\n\n//   const showsResponse = await fetchItems(client, path)\n\n//   return Promise.all(\n//     showsResponse.map(async (showResponse) => ({\n//       name: showResponse.name,\n//       seasons: await indexSeasons(\n//         providerId,\n//         client,\n//         `${path}/${showResponse.name}`,\n//       ),\n//     })),\n//   )\n// }\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const index = async (provider: FTP): Promise<IndexResponse> => {\n  return {\n    movies: [],\n    shows: [],\n  }\n\n  // const client = await getClient(\n  //   provider.host,\n  //   provider.port,\n  //   provider.username,\n  //   provider.password,\n  //   provider.secure,\n  // )\n\n  // return {\n  //   movies: await indexMovies(provider.id, client, provider.moviesPath),\n  //   shows: await indexShows(provider.id, client, provider.showsPath),\n  // }\n}\n","import { DriveItemChildrenResponse, DriveItemResponse } from './types'\nimport { Client } from '@microsoft/microsoft-graph-client'\n\nexport const getClient = (accessToken: string) =>\n  Client.init({\n    authProvider: (done) => done(null, accessToken),\n  })\n\nexport const fetchPathChildren = (\n  client: Client,\n  path: string,\n): Promise<DriveItemChildrenResponse> =>\n  client.api(`/me/drive/root:${path}:/children`).get()\n\nexport const fetchItem = (\n  client: Client,\n  itemId: string,\n): Promise<DriveItemResponse> => client.api(`/me/drive/items/${itemId}`).get()\n\nexport const fetchItemChildren = (\n  client: Client,\n  itemId: string,\n): Promise<DriveItemChildrenResponse> =>\n  client.api(`/me/drive/items/${itemId}/children`).get()\n","import { CaptionType, VTT_EXTENSION } from '../../types/files/Caption'\nimport {\n  M4V_EXTENSION,\n  MKV_EXTENSION,\n  MP4_EXTENSION,\n  VideoType,\n  WEBM_EXTENSION,\n} from '../../types/files/Video'\nimport { ProviderKind } from '../../types/providers/Provider'\n\nexport const parseFileName = (fileName: string) => ({\n  name: fileName.split('.').shift()!,\n  extension: fileName.split('.').pop(),\n})\n\nexport const parseCaptionType = (\n  extension: string,\n): CaptionType | undefined => {\n  switch (extension) {\n    case VTT_EXTENSION:\n      return VTT_EXTENSION\n  }\n}\n\nexport const parseVideoType = (extension: string): VideoType | undefined => {\n  switch (extension) {\n    case MP4_EXTENSION:\n      return MP4_EXTENSION\n    case M4V_EXTENSION:\n      return M4V_EXTENSION\n    case MKV_EXTENSION:\n      return MKV_EXTENSION\n    case WEBM_EXTENSION:\n      return WEBM_EXTENSION\n  }\n}\n\nexport const buildFileId = (kind: ProviderKind, id: string) => `${kind}@${id}`\n","import { Caption, CaptionType } from '../../../types/files/Caption'\nimport { DriveItemResponse, FileResponse, VideoResponse } from './types'\nimport { File, FileKind } from '../../../types/files/File'\nimport { Video, VideoType } from '../../../types/files/Video'\nimport {\n  buildFileId,\n  parseCaptionType,\n  parseFileName,\n  parseVideoType,\n} from '../util'\nimport { ProviderKind } from '../../../types/providers/Provider'\n\nconst buildCaption = (\n  providerId: string,\n  type: CaptionType,\n  name: string,\n  {\n    id,\n    name: fileName,\n    size,\n    webUrl,\n    '@microsoft.graph.downloadUrl': downloadUrl,\n  }: DriveItemResponse,\n  { mimeType }: FileResponse,\n): Caption => ({\n  kind: FileKind.Caption,\n  type,\n  id: buildFileId(ProviderKind.OneDrive, id),\n  name,\n  provider: {\n    kind: ProviderKind.OneDrive,\n    providerId,\n    id,\n    fileName,\n    size,\n    downloadUrl,\n    webUrl,\n    mimeType,\n  },\n})\n\nconst buildVideo = (\n  providerId: string,\n  type: VideoType,\n  name: string,\n  {\n    id,\n    name: fileName,\n    size,\n    webUrl,\n    '@microsoft.graph.downloadUrl': downloadUrl,\n  }: DriveItemResponse,\n  { mimeType }: FileResponse,\n  {\n    bitrate,\n    duration,\n    height,\n    width,\n    audioChannels,\n    audioFormat,\n    fourCC,\n    frameRate,\n  }: VideoResponse,\n): Video => ({\n  kind: FileKind.Video,\n  type,\n  id: buildFileId(ProviderKind.OneDrive, id),\n  name,\n  provider: {\n    kind: ProviderKind.OneDrive,\n    providerId,\n    id,\n    fileName,\n    size,\n    downloadUrl,\n    webUrl,\n    mimeType,\n    bitrate,\n    duration,\n    height,\n    width,\n    audioChannels,\n    audioFormat,\n    fourCC,\n    frameRate,\n  },\n})\n\nexport const buildFile =\n  (providerId: string) =>\n  (response: DriveItemResponse): File | undefined => {\n    if (response.file === undefined) return\n\n    const { name, extension } = parseFileName(response.name)\n    if (extension === undefined) return\n\n    const captionType = parseCaptionType(extension)\n    const videoType = parseVideoType(extension)\n\n    if (captionType !== undefined)\n      return buildCaption(\n        providerId,\n        captionType,\n        name,\n        response,\n        response.file,\n      )\n    else if (videoType !== undefined && response.video !== undefined)\n      return buildVideo(\n        providerId,\n        videoType,\n        name,\n        response,\n        response.file,\n        response.video,\n      )\n  }\n","import {\n  CaptionProvider,\n  IFTPFileProvider,\n  IOneDriveFileProvider,\n} from './FileProvider'\nimport { FileKind, IFile } from './File'\n\nexport const VTT_EXTENSION = 'vtt'\n\nexport type CaptionType = typeof VTT_EXTENSION\n\nexport interface Caption extends IFile<CaptionProvider> {\n  kind: typeof FileKind.Caption\n  type: CaptionType\n}\n\nexport type FTPCaption = IFTPFileProvider\n\nexport type OneDriveCaption = IOneDriveFileProvider\n","import {\n  EpisodeIndexResponse,\n  IndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n  ShowIndexResponse,\n} from '../types'\nimport {\n  fetchItem,\n  fetchItemChildren,\n  fetchPathChildren,\n  getClient,\n} from './api'\nimport { CannotFindFileError } from '../../../errors/CannotFindFileError'\nimport { Client } from '@microsoft/microsoft-graph-client'\nimport { File } from '../../../types/files/File'\nimport { OneDrive } from '../../../types/providers/OneDrive'\nimport { ProviderKind } from '../../../types/providers/Provider'\nimport { buildFile } from './util'\nimport { notUndefined } from '../../../util'\n\nexport const updateFile = async (\n  provider: OneDrive,\n  file: File,\n): Promise<File> => {\n  const client = getClient(provider.accessToken.token)\n  if (file.provider.kind !== ProviderKind.OneDrive)\n    throw new Error(\n      'Internal error: attempted to update file with the wrong provider.',\n    )\n  const response = await fetchItem(client, file.provider.id)\n  const newFile = buildFile(provider.id)(response)\n\n  if (newFile !== undefined) return newFile\n  else throw new CannotFindFileError(file)\n}\n\nconst indexFiles = async (\n  providerId: string,\n  client: Client,\n  folderId: string,\n): Promise<File[]> => {\n  const { value: filesResponse } = await fetchItemChildren(client, folderId)\n\n  return filesResponse.map(buildFile(providerId)).filter(notUndefined)\n}\n\nconst indexMovies = async (\n  providerId: string,\n  client: Client,\n  path: string | undefined,\n): Promise<MovieIndexResponse[]> => {\n  if (path === undefined) return []\n\n  const { value: moviesResponse } = await fetchPathChildren(client, path)\n\n  return Promise.all(\n    moviesResponse.map(async (movieResponse) => ({\n      name: movieResponse.name,\n      files: await indexFiles(providerId, client, movieResponse.id),\n    })),\n  )\n}\n\nconst indexEpisodes = async (\n  providerId: string,\n  client: Client,\n  seasonFolderId: string,\n): Promise<EpisodeIndexResponse[]> => {\n  const { value: episodesResponse } = await fetchItemChildren(\n    client,\n    seasonFolderId,\n  )\n\n  const episodes = await Promise.all(\n    episodesResponse.map(async (episodeResponse) => {\n      const number = Number.parseInt(episodeResponse.name)\n      if (isNaN(number)) return\n\n      return {\n        number,\n        files: await indexFiles(providerId, client, episodeResponse.id),\n      }\n    }),\n  )\n\n  return episodes.filter(notUndefined)\n}\n\nconst indexSeasons = async (\n  providerId: string,\n  client: Client,\n  showFolderId: string,\n): Promise<SeasonIndexResponse[]> => {\n  const { value: seasonsResponse } = await fetchItemChildren(\n    client,\n    showFolderId,\n  )\n\n  const seasons = await Promise.all(\n    seasonsResponse.map(async (seasonResponse) => {\n      const number = Number.parseInt(seasonResponse.name)\n      if (isNaN(number)) return\n\n      return {\n        number,\n        episodes: await indexEpisodes(providerId, client, seasonResponse.id),\n      }\n    }),\n  )\n\n  return seasons.filter(notUndefined)\n}\n\nconst indexShows = async (\n  providerId: string,\n  client: Client,\n  path: string | undefined,\n): Promise<ShowIndexResponse[]> => {\n  if (path === undefined) return []\n\n  const { value: showsResponse } = await fetchPathChildren(client, path)\n\n  return Promise.all(\n    showsResponse.map(async (showResponse) => ({\n      name: showResponse.name,\n      seasons: await indexSeasons(providerId, client, showResponse.id),\n    })),\n  )\n}\n\nexport const index = async (provider: OneDrive): Promise<IndexResponse> => {\n  const client = getClient(provider.accessToken.token)\n\n  return {\n    movies: await indexMovies(provider.id, client, provider.moviesPath),\n    shows: await indexShows(provider.id, client, provider.showsPath),\n  }\n}\n","import {\n  EpisodeIndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n} from './types'\nimport { File, FileKind } from '../../types/files/File'\nimport { Provider, ProviderKind } from '../../types/providers/Provider'\nimport { Caption } from '../../types/files/Caption'\nimport { EpisodeLike } from '../../types/items/Episode'\nimport { ItemKind } from '../../types/items/Item'\nimport { MovieLike } from '../../types/items/Movie'\nimport { SeasonLike } from '../../types/items/Season'\nimport { ShowLike } from '../../types/items/Show'\nimport { Video } from '../../types/files/Video'\nimport { updateFile as ftpUpdateFile } from './FTP'\nimport { updateFile as oneDriveUpdateFile } from './OneDrive'\n\nconst isCaption = (file: File): file is Caption =>\n  file.kind === FileKind.Caption\n\nconst isVideo = (file: File): file is Video => file.kind === FileKind.Video\n\nexport const buildEpisodeLike =\n  (showTmdbId: number, seasonNumber: number) =>\n  (item: EpisodeIndexResponse): EpisodeLike => ({\n    kind: ItemKind.Episode,\n    number: item.number,\n    seasonNumber,\n    showTmdbId,\n    sources: item.files.filter(isVideo),\n    captions: item.files.filter(isCaption),\n    usage: {\n      lastWatched: undefined,\n      progress: undefined,\n    },\n  })\n\nexport const buildMovieLike =\n  (tmdbId: number) =>\n  (item: MovieIndexResponse): MovieLike => ({\n    kind: ItemKind.Movie,\n    tmdbId,\n    sources: item.files.filter(isVideo),\n    captions: item.files.filter(isCaption),\n    usage: {\n      lastWatched: undefined,\n      progress: undefined,\n    },\n  })\n\nexport const buildSeasonLike =\n  (showTmdbId: number) =>\n  (item: SeasonIndexResponse): SeasonLike => ({\n    kind: ItemKind.Season,\n    number: item.number,\n    showTmdbId,\n    usage: {\n      lastWatched: undefined,\n      progress: undefined,\n    },\n  })\n\nexport const buildShowLike = (tmdbId: number) => (): ShowLike => ({\n  kind: ItemKind.Show,\n  tmdbId,\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const updateFile = (provider: Provider, file: File): Promise<File> => {\n  switch (provider.kind) {\n    case ProviderKind.FTP:\n      return ftpUpdateFile(provider, file)\n    case ProviderKind.OneDrive:\n      return oneDriveUpdateFile(provider, file)\n  }\n}\n","import { Episode, EpisodeLike } from '../types/items/Episode'\nimport {\n  EpisodeIndexResponse,\n  IndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n  ShowIndexResponse,\n} from './drives/types'\nimport { Movie, MovieLike } from '../types/items/Movie'\nimport { Provider, ProviderKind } from '../types/providers/Provider'\nimport { Season, SeasonLike } from '../types/items/Season'\nimport { Show, ShowLike } from '../types/items/Show'\nimport {\n  buildEpisodeLike,\n  buildMovieLike,\n  buildSeasonLike,\n  buildShowLike,\n} from './drives'\nimport { findMovie, findShow } from './databases/TMDb/api'\nimport { index as ftpIndex } from '../services/drives/FTP'\nimport { index as oneDriveIndex } from '../services/drives/OneDrive'\n\nconst handleProvider = (provider: Provider): Promise<IndexResponse> => {\n  switch (provider.kind) {\n    case ProviderKind.FTP:\n      return ftpIndex(provider)\n    case ProviderKind.OneDrive:\n      return oneDriveIndex(provider)\n  }\n}\n\nconst indexMovies = (\n  moviesResponse: MovieIndexResponse[],\n  fetchMovieMetadata: (movie: MovieLike) => Promise<Movie>,\n) =>\n  Promise.all(\n    moviesResponse.map(async (movieResponse) => {\n      const tmdbId = await findMovie(movieResponse.name)\n      if (tmdbId === undefined) return\n\n      const movieAlike = buildMovieLike(tmdbId)(movieResponse)\n      await fetchMovieMetadata(movieAlike)\n    }),\n  )\n\nconst indexShows = (\n  showsResponse: ShowIndexResponse[],\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n  fetchShowMetadata: (show: ShowLike) => Promise<Show>,\n) =>\n  Promise.all(\n    showsResponse.map(async (showResponse) => {\n      const tmdbId = await findShow(showResponse.name)\n      if (tmdbId === undefined) return\n\n      const showAlike = buildShowLike(tmdbId)()\n      const show = await fetchShowMetadata(showAlike)\n      await indexSeasons(\n        showResponse.seasons,\n        show,\n        fetchEpisodeMetadata,\n        fetchSeasonMetadata,\n      )\n    }),\n  )\n\nconst indexSeasons = (\n  seasonsResponse: SeasonIndexResponse[],\n  show: Show,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n) =>\n  Promise.all(\n    seasonsResponse.map(async (seasonResponse) => {\n      const seasonAlike = buildSeasonLike(show.tmdbId)(seasonResponse)\n      const season = await fetchSeasonMetadata(show, seasonAlike)\n      await indexEpisodes(\n        seasonResponse.episodes,\n        show,\n        season,\n        fetchEpisodeMetadata,\n      )\n    }),\n  )\n\nconst indexEpisodes = (\n  episodesResponse: EpisodeIndexResponse[],\n  show: Show,\n  season: Season,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n) =>\n  Promise.all(\n    episodesResponse.map(async (episodeResponse) => {\n      const episodeAlike = buildEpisodeLike(\n        show.tmdbId,\n        season.number,\n      )(episodeResponse)\n      await fetchEpisodeMetadata(show.id, season.id, episodeAlike)\n    }),\n  )\n\nexport const index = async (\n  provider: Provider,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchMovieMetadata: (movie: MovieLike) => Promise<Movie>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n  fetchShowMetadata: (show: ShowLike) => Promise<Show>,\n) => {\n  const { movies: moviesResponse, shows: showsResponse } = await handleProvider(\n    provider,\n  )\n\n  await indexMovies(moviesResponse, fetchMovieMetadata)\n  await indexShows(\n    showsResponse,\n    fetchEpisodeMetadata,\n    fetchSeasonMetadata,\n    fetchShowMetadata,\n  )\n}\n","import { Episode, EpisodeLike } from '../types/items/Episode'\nimport { Movie, MovieLike } from '../types/items/Movie'\nimport { Season, SeasonLike } from '../types/items/Season'\nimport { Show, ShowLike } from '../types/items/Show'\nimport { episodeSelector, episodesSelector } from './episodes/selectors'\nimport {\n  fetchEpisodeMetadata as fetchEpisodeMetadataCall,\n  fetchMovieMetadata as fetchMovieMetadataCall,\n  fetchSeasonMetadata as fetchSeasonMetadataCall,\n  fetchShowMetadata as fetchShowMetadataCall,\n} from '../services/databases/TMDb'\nimport { movieSelector, moviesSelector } from './movies/selectors'\nimport { seasonSelector, seasonsSelector } from './seasons/selectors'\nimport { showSelector, showsSelector } from './shows/selectors'\nimport { AppThunk } from '.'\nimport { Caption } from '../types/files/Caption'\nimport { File } from '../types/files/File'\nimport { ItemKind } from '../types/items/Item'\nimport { Provider } from '../types/providers/Provider'\nimport { Video } from '../types/files/Video'\nimport { auth as authCall } from './auth/thunks'\nimport { removeFilesByProvider as episodeRemoveFilesByProvider } from './episodes/thunks'\nimport { index as indexCall } from '../services/indexing'\nimport { removeFilesByProvider as movieRemoveFilesByProvider } from './movies/thunks'\nimport { providerSelector } from './auth/selectors'\nimport { removeProvider as removeProviderAction } from './auth/actions'\nimport { updateEpisode } from './episodes/actions'\nimport { updateFile as updateFileCall } from '../services/drives'\nimport { updateMovie } from './movies/actions'\nimport { updateSeason } from './seasons/actions'\nimport { updateShow } from './shows/actions'\n\nexport const index =\n  (providers: Provider[]): AppThunk<Promise<void>> =>\n  async (dispatch) => {\n    await Promise.all(\n      providers.map(async (provider) => {\n        const updatedProvider = await dispatch(authCall(provider))\n        if (updatedProvider === undefined)\n          throw new Error(\n            'cannot sign in using the redirect flow while updating files',\n          )\n\n        await indexCall(\n          updatedProvider,\n          (showId: string, seasonId: string, episode: EpisodeLike) =>\n            dispatch(fetchEpisodeMetadata(showId, seasonId, episode)),\n          (movie: MovieLike) => dispatch(fetchMovieMetadata(movie)),\n          (show: Show, season: SeasonLike) =>\n            dispatch(fetchSeasonMetadata(show, season)),\n          (show: ShowLike) => dispatch(fetchShowMetadata(show)),\n        )\n      }),\n    )\n  }\n\nconst updateFile =\n  (file: File): AppThunk<Promise<File>> =>\n  async (dispatch, getState) => {\n    const { auth } = getState()\n    const provider = providerSelector(file.provider.providerId)(auth)\n    if (provider === undefined)\n      throw new Error('could not find provider for file')\n\n    const updatedProvider = await dispatch(authCall(provider))\n    if (updatedProvider === undefined)\n      throw new Error(\n        'cannot sign in using the redirect flow while updating files',\n      )\n\n    const updatedFile = await updateFileCall(updatedProvider, file)\n\n    return updatedFile\n  }\n\nconst handleUpdateWatchableItem = (item: Episode | Movie) => {\n  switch (item.kind) {\n    case ItemKind.Episode:\n      return updateEpisode(item)\n    case ItemKind.Movie:\n      return updateMovie(item)\n  }\n}\n\nexport const updateFiles =\n  (item: Episode | Movie): AppThunk<Promise<Episode | Movie>> =>\n  async (dispatch) => {\n    const sources = await Promise.all(\n      item.sources.map(\n        (source) => dispatch(updateFile(source)) as Promise<Video>,\n      ),\n    )\n    const captions = await Promise.all(\n      item.captions.map(\n        (caption) => dispatch(updateFile(caption)) as Promise<Caption>,\n      ),\n    )\n    const updatedItem = {\n      ...item,\n      sources,\n      captions,\n    }\n\n    handleUpdateWatchableItem(updatedItem)\n    return updatedItem\n  }\n\nconst fetchEpisodeMetadata =\n  (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ): AppThunk<Promise<Episode>> =>\n  async (dispatch, getState) => {\n    const { episodes } = getState()\n\n    const newEpisode = await fetchEpisodeMetadataCall(showId, seasonId, episode)\n    const oldEpisode = episodeSelector(newEpisode.id)(episodes)\n    if (oldEpisode !== undefined) newEpisode.usage = oldEpisode.usage\n\n    dispatch(updateEpisode(newEpisode))\n    return newEpisode\n  }\n\nconst fetchMovieMetadata =\n  (movie: MovieLike): AppThunk<Promise<Movie>> =>\n  async (dispatch, getState) => {\n    const { movies } = getState()\n\n    const newMovie = await fetchMovieMetadataCall(movie)\n    const oldMovie = movieSelector(newMovie.id)(movies)\n    if (oldMovie !== undefined) newMovie.usage = oldMovie.usage\n\n    dispatch(updateMovie(newMovie))\n    return newMovie\n  }\n\nconst fetchSeasonMetadata =\n  (show: Show, season: SeasonLike): AppThunk<Promise<Season>> =>\n  async (dispatch, getState) => {\n    const { seasons } = getState()\n\n    const newSeason = await fetchSeasonMetadataCall(show, season)\n    const oldSeason = seasonSelector(newSeason.id)(seasons)\n    if (oldSeason !== undefined) newSeason.usage = oldSeason.usage\n\n    dispatch(updateSeason(newSeason))\n    return newSeason\n  }\n\nconst fetchShowMetadata =\n  (show: ShowLike): AppThunk<Promise<Show>> =>\n  async (dispatch, getState) => {\n    const { shows } = getState()\n\n    const newShow = await fetchShowMetadataCall(show)\n    const oldShow = showSelector(newShow.id)(shows)\n    if (oldShow !== undefined) newShow.usage = oldShow.usage\n\n    dispatch(updateShow(newShow))\n    return newShow\n  }\n\nconst fetchEpisodesMetadata =\n  (): AppThunk<Promise<void>> => async (dispatch, getState) => {\n    const { episodes } = getState()\n\n    await Promise.all(\n      episodesSelector(episodes).map(async (episode) =>\n        dispatch(\n          fetchEpisodeMetadata(episode.showId, episode.seasonId, episode),\n        ),\n      ),\n    )\n  }\n\nconst fetchMoviesMetadata =\n  (): AppThunk<Promise<void>> => async (dispatch, getState) => {\n    const { movies } = getState()\n\n    await Promise.all(\n      moviesSelector(movies).map(async (movie) =>\n        dispatch(fetchMovieMetadata(movie)),\n      ),\n    )\n  }\n\nconst fetchSeasonsMetadata =\n  (): AppThunk<Promise<void>> => async (dispatch, getState) => {\n    const { seasons, shows } = getState()\n\n    await Promise.all(\n      seasonsSelector(seasons).map(async (season) => {\n        const show = showSelector(season.showId)(shows)\n        if (show === undefined) throw new Error('cannot find show for season')\n\n        return dispatch(fetchSeasonMetadata(show, season))\n      }),\n    )\n  }\n\nconst fetchShowsMetadata =\n  (): AppThunk<Promise<void>> => async (dispatch, getState) => {\n    const { shows } = getState()\n\n    await Promise.all(\n      showsSelector(shows).map(async (show) =>\n        dispatch(fetchShowMetadata(show)),\n      ),\n    )\n  }\n\nexport const fetchAllMetadata =\n  (): AppThunk<Promise<void>> => async (dispatch) => {\n    await dispatch(fetchMoviesMetadata())\n    await dispatch(fetchShowsMetadata())\n    await dispatch(fetchSeasonsMetadata())\n    await dispatch(fetchEpisodesMetadata())\n  }\n\nexport const removeProvider =\n  (id: string): AppThunk<void> =>\n  (dispatch, getState) => {\n    dispatch(removeProviderAction(id))\n\n    const { episodes, movies } = getState()\n    episodesSelector(episodes).forEach((episode) =>\n      dispatch(episodeRemoveFilesByProvider(episode, id)),\n    )\n    moviesSelector(movies).forEach((movie) =>\n      dispatch(movieRemoveFilesByProvider(movie, id)),\n    )\n  }\n"],"names":["Modal","isActive","onClose","children","modalRef","useRef","useOnClickOutside","className","classNames","active","ref","useModal","useState","show","setShow","useCallback","updateEpisode","episode","type","UPDATE_EPISODE","payload","episodeSelector","id","state","episodesSelector","Object","keys","map","episodesBySeasonSelector","seasonId","createSelector","episodes","filter","updateSeasonProgress","season","progress","dispatch","getState","usage","lastWatched","Date","toISOString","updateSeason","shows","showSelector","showId","undefined","Error","updateShow","updateShowProgress","number","updateEpisodeProgress","seasons","seasonSelector","updateMovie","movie","UPDATE_MOVIE","movieSelector","moviesSelector","inProgressSelector","isInProgress","recentlyWatchedSelector","wasRecentlyWatched","RECENTLY_WATCHED_THRESHOLD","moviesByPersonSelector","movies","cast","find","person","crew","moviesPersonSelector","fn","reduce","acc","people","concat","UPDATE_SEASON","seasonsSelector","seasonsByShowSelector","seasonsByPersonSelector","seasonsPersonSelector","UPDATE_SHOW","showsSelector","HttpMethod","FileKind","buildUrl","baseUrl","path","params","url","URL","entries","key","value","searchParams","append","http","method","accessToken","fetch","href","headers","Authorization","Accept","response","text","body","JSON","parse","ok","APIError","status","statusText","get","GET","BASE_URL","ACCESS_TOKEN","process","findMovie","query","language","i18next","results","length","findShow","fetchMovieCredits","fetchSeasonCredits","seasonNumber","fetchEpisode","episodeNumber","fetchEpisodeMetadata","showTmdbId","buildEpisode","fetchMovieMetadata","tmdbId","creditsResponse","buildMovie","fetchSeasonMetadata","buildSeason","fetchShowMetadata","buildShow","updateFile","provider","file","CannotFindFileError","index","getClient","Client","authProvider","done","fetchPathChildren","client","api","fetchItem","itemId","fetchItemChildren","buildFileId","kind","buildFile","providerId","fileName","name","split","shift","extension","pop","captionType","parseCaptionType","videoType","MP4_EXTENSION","M4V_EXTENSION","MKV_EXTENSION","WEBM_EXTENSION","parseVideoType","size","webUrl","downloadUrl","mimeType","Caption","ProviderKind","buildCaption","video","bitrate","duration","height","width","audioChannels","audioFormat","fourCC","frameRate","Video","buildVideo","token","newFile","indexFiles","folderId","filesResponse","notUndefined","indexMovies","moviesResponse","Promise","all","movieResponse","files","indexEpisodes","seasonFolderId","episodesResponse","episodeResponse","Number","parseInt","isNaN","indexSeasons","showFolderId","seasonsResponse","seasonResponse","indexShows","showsResponse","showResponse","moviesPath","showsPath","isCaption","isVideo","buildEpisodeLike","item","ItemKind","sources","captions","buildMovieLike","buildSeasonLike","buildShowLike","ftpUpdateFile","oneDriveUpdateFile","handleProvider","ftpIndex","oneDriveIndex","movieAlike","showAlike","seasonAlike","episodeAlike","providers","authCall","updatedProvider","indexCall","auth","providerSelector","updateFileCall","updatedFile","handleUpdateWatchableItem","updateFiles","source","caption","updatedItem","fetchEpisodeMetadataCall","newEpisode","oldEpisode","fetchMovieMetadataCall","newMovie","oldMovie","fetchSeasonMetadataCall","newSeason","oldSeason","fetchShowMetadataCall","newShow","oldShow","fetchAllMetadata"],"sourceRoot":""}