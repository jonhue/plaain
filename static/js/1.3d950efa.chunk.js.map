{"version":3,"sources":["store/movies/selectors.ts","store/shows/selectors.ts","store/seasons/selectors.ts","store/episodes/selectors.ts","services/http.ts","types/files/File.ts","services/databases/TMDb/api.ts","services/databases/TMDb/index.ts","services/drives/OneDrive/api.ts","services/drives/util.ts","services/drives/OneDrive/util.ts","types/files/captions/Caption.ts","services/drives/OneDrive/index.ts","services/drives/index.tsx","services/indexing.ts","store/thunks.ts","store/episodes/actions.ts","store/seasons/actions.ts","store/shows/actions.ts","store/movies/thunks.ts","store/movies/actions.ts","store/seasons/thunks.ts","store/shows/thunks.ts","store/episodes/thunks.ts"],"names":["movieSelector","id","state","moviesSelector","Object","keys","map","inProgressSelector","filter","isInProgress","recentlyWatchedSelector","movie","wasRecentlyWatched","RECENTLY_WATCHED_THRESHOLD","moviesByPersonSelector","createSelector","movies","cast","find","person","crew","moviesPersonSelector","fn","reduce","acc","people","concat","showSelector","showsSelector","seasonSelector","seasonsSelector","season","seasonsByShowSelector","showId","seasons","seasonsByPersonSelector","seasonsPersonSelector","episodeSelector","episodesSelector","episodesBySeasonSelector","seasonId","episodes","episode","HttpMethod","FileKind","buildUrl","baseUrl","path","params","url","URL","undefined","entries","key","value","searchParams","append","http","method","accessToken","a","fetch","href","headers","Authorization","Accept","response","text","body","JSON","parse","ok","APIError","status","statusText","get","GET","BASE_URL","ACCESS_TOKEN","process","findMovie","query","language","i18next","results","length","findShow","fetchMovieCredits","fetchSeasonCredits","seasonNumber","fetchEpisode","episodeNumber","fetchEpisodeMetadata","showTmdbId","number","buildEpisode","fetchMovieMetadata","tmdbId","creditsResponse","buildMovie","fetchSeasonMetadata","show","buildSeason","fetchShowMetadata","buildShow","getClient","Client","init","authProvider","done","fetchPathChildren","client","api","fetchItem","itemId","fetchItemChildren","buildFileId","kind","buildFile","providerId","file","fileName","name","split","shift","extension","pop","captionType","parseCaptionType","videoType","MP4_EXTENSION","M4V_EXTENSION","MKV_EXTENSION","WEBM_EXTENSION","parseVideoType","type","size","webUrl","downloadUrl","mimeType","Caption","ProviderKind","OneDrive","provider","buildCaption","video","bitrate","duration","height","width","audioChannels","audioFormat","fourCC","frameRate","Video","buildVideo","updateFile","newFile","CannotFindFileError","indexFiles","folderId","filesResponse","notUndefined","indexMovies","moviesResponse","Promise","all","movieResponse","files","indexEpisodes","seasonFolderId","episodesResponse","episodeResponse","Number","parseInt","isNaN","indexSeasons","showFolderId","seasonsResponse","seasonResponse","indexShows","showsResponse","showResponse","index","moviesPath","showsPath","shows","isCaption","isVideo","buildEpisodeLike","item","ItemKind","Episode","sources","captions","usage","lastWatched","progress","buildMovieLike","Movie","buildSeasonLike","Season","buildShowLike","Show","oneDriveUpdateFile","token","handleProvider","oneDriveIndex","movieAlike","showAlike","seasonAlike","episodeAlike","providers","dispatch","authCall","updatedProvider","Error","indexCall","getState","auth","providerSelector","updateFileCall","updatedFile","handleUpdateWatchableItem","updateEpisode","updateMovie","updateFiles","source","caption","updatedItem","fetchEpisodeMetadataCall","newEpisode","oldEpisode","fetchMovieMetadataCall","newMovie","oldMovie","fetchSeasonMetadataCall","newSeason","oldSeason","updateSeason","fetchShowMetadataCall","newShow","oldShow","updateShow","fetchAllMetadata","UPDATE_EPISODE","payload","UPDATE_SEASON","UPDATE_SHOW","updateMovieProgress","Date","toISOString","removeFilesByProvider","UPDATE_MOVIE","updateSeasonProgress","updateShowProgress","updateEpisodeProgress"],"mappings":"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","file":"static/js/1.3d950efa.chunk.js","sourcesContent":["import { isInProgress, wasRecentlyWatched } from '../../util'\nimport { Movie } from '../../types/items/Movie'\nimport { MoviesState } from './types'\nimport { Person } from '../../types/items/Person'\nimport { RECENTLY_WATCHED_THRESHOLD } from '../../constants'\nimport { createSelector } from 'reselect'\n\nexport const movieSelector = (id: string) => (state: MoviesState) => state[id]\n\nexport const moviesSelector = (state: MoviesState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const inProgressSelector = (state: MoviesState) =>\n  moviesSelector(state).filter(isInProgress)\n\nexport const recentlyWatchedSelector = (state: MoviesState) =>\n  moviesSelector(state).filter((movie) =>\n    wasRecentlyWatched(movie, RECENTLY_WATCHED_THRESHOLD),\n  )\n\nexport const moviesByPersonSelector = (id: string) =>\n  createSelector(moviesSelector, (movies) =>\n    movies.filter(\n      (movie) =>\n        movie.cast.find((person) => person.id === id) ||\n        movie.crew.find((person) => person.id === id),\n    ),\n  )\n\nexport const moviesPersonSelector = (\n  id: string,\n  fn: (movie: Movie) => Person[],\n) =>\n  createSelector(moviesSelector, (movies) =>\n    movies\n      .map(fn)\n      .reduce((acc, people) => acc.concat(people), [])\n      .filter((person) => person.id === id),\n  )\n","import { ShowsState } from './types'\n\nexport const showSelector = (id: string) => (state: ShowsState) => state[id]\n\nexport const showsSelector = (state: ShowsState) =>\n  Object.keys(state).map((id) => state[id]!)\n","import { isInProgress, wasRecentlyWatched } from '../../util'\nimport { Person } from '../../types/items/Person'\nimport { RECENTLY_WATCHED_THRESHOLD } from '../../constants'\nimport { Season } from '../../types/items/Season'\nimport { SeasonsState } from './types'\nimport { createSelector } from 'reselect'\n\nexport const seasonSelector = (id: string) => (state: SeasonsState) => state[id]\n\nexport const seasonsSelector = (state: SeasonsState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const inProgressSelector = (state: SeasonsState) =>\n  seasonsSelector(state).filter(isInProgress)\n\nexport const recentlyWatchedSelector = (state: SeasonsState) =>\n  seasonsSelector(state).filter((season) =>\n    wasRecentlyWatched(season, RECENTLY_WATCHED_THRESHOLD),\n  )\n\nexport const seasonsByShowSelector = (showId: string) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons.filter((season) => season.showId === showId),\n  )\n\nexport const seasonsByPersonSelector = (id: string) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons.filter(\n      (season) =>\n        season.cast.find((person) => person.id === id) ||\n        season.crew.find((person) => person.id === id),\n    ),\n  )\n\nexport const seasonsPersonSelector = (\n  id: string,\n  fn: (season: Season) => Person[],\n) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons\n      .map(fn)\n      .reduce((acc, people) => acc.concat(people), [])\n      .filter((person) => person.id === id),\n  )\n","import { EpisodesState } from './types'\nimport { createSelector } from 'reselect'\n\nexport const episodeSelector = (id: string) => (state: EpisodesState) =>\n  state[id]\n\nexport const episodesSelector = (state: EpisodesState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const episodesBySeasonSelector = (seasonId: string) =>\n  createSelector(episodesSelector, (episodes) =>\n    episodes.filter((episode) => episode.seasonId === seasonId),\n  )\n","import { APIError } from '../errors/APIError'\n\nenum HttpMethod {\n  GET = 'GET',\n}\n\ntype Params = Record<string, string>\n\nconst buildUrl = (baseUrl: string, path: string, params?: Params) => {\n  const url = new URL(`${baseUrl}/${path}`)\n\n  if (params !== undefined)\n    for (const [key, value] of Object.entries(params))\n      url.searchParams.append(key, value)\n\n  return url\n}\n\nconst http = async <T>(\n  baseUrl: string,\n  path: string,\n  method: HttpMethod,\n  accessToken: string,\n  params?: Params,\n): Promise<T> => {\n  const response = await fetch(buildUrl(baseUrl, path, params).href, {\n    method,\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n\n  // check if response is empty\n  // if empty just return an empty object\n  const text = await response.text()\n  const body = text ? JSON.parse(text) : {}\n\n  if (response.ok) return body\n  else throw new APIError(response.status, response.statusText)\n}\n\nexport const get = <T>(\n  baseUrl: string,\n  path: string,\n  accessToken: string,\n  params: Params,\n) => http<T>(baseUrl, path, HttpMethod.GET, accessToken, params)\n","import { Caption } from './captions/Caption'\nimport { FileProvider } from './FileProvider'\nimport { Video } from './videos/Video'\n\nexport enum FileKind {\n  Video,\n  Caption,\n}\n\nexport interface IFile<T extends FileProvider> {\n  kind: FileKind\n  id: string\n  name: string\n  provider: T\n}\n\nexport type File = Caption | Video\n","import {\n  MovieCreditsResponse,\n  MovieDetailsResponse,\n  SearchMoviesResponse,\n  SearchTVShowsResponse,\n  TVEpisodeResponse,\n  TVSeasonCreditsResponse,\n  TVSeasonDetailsResponse,\n  TVShowDetailsResponse,\n} from './types'\nimport { get } from '../../http'\nimport i18next from 'i18next'\n\nconst BASE_URL = 'https://api.themoviedb.org/3'\nconst ACCESS_TOKEN = process.env.REACT_APP_TMDB_API_READ_ACCESS_TOKEN!\n\nexport const findMovie = async (query: string) => {\n  const { results } = await get<SearchMoviesResponse>(\n    BASE_URL,\n    'search/movie',\n    ACCESS_TOKEN,\n    { language: i18next.language, query },\n  )\n\n  if (results.length === 0) return undefined\n  else return results[0].id\n}\n\nexport const findShow = async (query: string) => {\n  const { results } = await get<SearchTVShowsResponse>(\n    BASE_URL,\n    'search/tv',\n    ACCESS_TOKEN,\n    { language: i18next.language, query },\n  )\n\n  if (results.length === 0) return undefined\n  else return results[0].id\n}\n\nexport const fetchMovie = (id: number) =>\n  get<MovieDetailsResponse>(BASE_URL, `movie/${id}`, ACCESS_TOKEN, {\n    language: i18next.language,\n  })\n\nexport const fetchMovieCredits = (id: number) =>\n  get<MovieCreditsResponse>(BASE_URL, `movie/${id}/credits`, ACCESS_TOKEN, {\n    language: i18next.language,\n  })\n\nexport const fetchShow = (id: number) =>\n  get<TVShowDetailsResponse>(BASE_URL, `tv/${id}`, ACCESS_TOKEN, {\n    language: i18next.language,\n  })\n\nexport const fetchSeason = (showId: number, seasonNumber: number) =>\n  get<TVSeasonDetailsResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}`,\n    ACCESS_TOKEN,\n    { language: i18next.language },\n  )\n\nexport const fetchSeasonCredits = (showId: number, seasonNumber: number) =>\n  get<TVSeasonCreditsResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}/credits`,\n    ACCESS_TOKEN,\n    { language: i18next.language },\n  )\n\nexport const fetchEpisode = (\n  showId: number,\n  seasonNumber: number,\n  episodeNumber: number,\n) =>\n  get<TVEpisodeResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}/episode/${episodeNumber}`,\n    ACCESS_TOKEN,\n    { language: i18next.language },\n  )\n","import { Episode, EpisodeLike } from '../../../types/items/Episode'\nimport { Movie, MovieLike } from '../../../types/items/Movie'\nimport { Season, SeasonLike } from '../../../types/items/Season'\nimport { Show, ShowLike } from '../../../types/items/Show'\nimport { buildEpisode, buildMovie, buildSeason, buildShow } from './util'\nimport {\n  fetchEpisode,\n  fetchMovie,\n  fetchMovieCredits,\n  fetchSeason,\n  fetchSeasonCredits,\n  fetchShow,\n} from './api'\n\nexport const fetchEpisodeMetadata = async (\n  showId: string,\n  seasonId: string,\n  episode: EpisodeLike,\n): Promise<Episode> => {\n  const response = await fetchEpisode(\n    episode.showTmdbId,\n    episode.seasonNumber,\n    episode.number,\n  )\n\n  return buildEpisode(showId, seasonId, episode, response)\n}\n\nexport const fetchMovieMetadata = async (movie: MovieLike): Promise<Movie> => {\n  const response = await fetchMovie(movie.tmdbId)\n  const creditsResponse = await fetchMovieCredits(movie.tmdbId)\n\n  return buildMovie(movie, response, creditsResponse)\n}\n\nexport const fetchSeasonMetadata = async (\n  show: Show,\n  season: SeasonLike,\n): Promise<Season> => {\n  const response = await fetchSeason(season.showTmdbId, season.number)\n  const creditsResponse = await fetchSeasonCredits(\n    season.showTmdbId,\n    season.number,\n  )\n\n  return buildSeason(show, season, response, creditsResponse)\n}\n\nexport const fetchShowMetadata = async (show: ShowLike): Promise<Show> => {\n  const response = await fetchShow(show.tmdbId)\n\n  return buildShow(show, response)\n}\n","import { DriveItemChildrenResponse, DriveItemResponse } from './types'\nimport { Client } from '@microsoft/microsoft-graph-client'\n\nexport const getClient = (accessToken: string) =>\n  Client.init({\n    authProvider: (done) => done(null, accessToken),\n  })\n\nexport const fetchPathChildren = (\n  client: Client,\n  path: string,\n): Promise<DriveItemChildrenResponse> =>\n  client.api(`/me/drive/root:${path}:/children`).get()\n\nexport const fetchItem = (\n  client: Client,\n  itemId: string,\n): Promise<DriveItemResponse> => client.api(`/me/drive/items/${itemId}`).get()\n\nexport const fetchItemChildren = (\n  client: Client,\n  itemId: string,\n): Promise<DriveItemChildrenResponse> =>\n  client.api(`/me/drive/items/${itemId}/children`).get()\n","import { CaptionType, VTT_EXTENSION } from '../../types/files/captions/Caption'\nimport {\n  M4V_EXTENSION,\n  MKV_EXTENSION,\n  MP4_EXTENSION,\n  VideoType,\n  WEBM_EXTENSION,\n} from '../../types/files/videos/Video'\nimport { ProviderKind } from '../../types/providers/Provider'\n\nexport const parseFileName = (fileName: string) => ({\n  name: fileName.split('.').shift()!,\n  extension: fileName.split('.').pop(),\n})\n\nexport const parseCaptionType = (\n  extension: string,\n): CaptionType | undefined => {\n  switch (extension) {\n    case VTT_EXTENSION:\n      return VTT_EXTENSION\n  }\n}\n\nexport const parseVideoType = (extension: string): VideoType | undefined => {\n  switch (extension) {\n    case MP4_EXTENSION:\n      return MP4_EXTENSION\n    case M4V_EXTENSION:\n      return M4V_EXTENSION\n    case MKV_EXTENSION:\n      return MKV_EXTENSION\n    case WEBM_EXTENSION:\n      return WEBM_EXTENSION\n  }\n}\n\nexport const buildFileId = (kind: ProviderKind, id: string) => `${kind}@${id}`\n","import { Caption, CaptionType } from '../../../types/files/captions/Caption'\nimport { DriveItemResponse, FileResponse, VideoResponse } from './types'\nimport { File, FileKind } from '../../../types/files/File'\nimport { Video, VideoType } from '../../../types/files/videos/Video'\nimport {\n  buildFileId,\n  parseCaptionType,\n  parseFileName,\n  parseVideoType,\n} from '../util'\nimport { ProviderKind } from '../../../types/providers/Provider'\n\nconst buildCaption = (\n  providerId: string,\n  type: CaptionType,\n  name: string,\n  {\n    id,\n    name: fileName,\n    size,\n    webUrl,\n    '@microsoft.graph.downloadUrl': downloadUrl,\n  }: DriveItemResponse,\n  { mimeType }: FileResponse,\n): Caption => ({\n  kind: FileKind.Caption,\n  type,\n  id: buildFileId(ProviderKind.OneDrive, id),\n  name,\n  provider: {\n    kind: ProviderKind.OneDrive,\n    providerId,\n    id,\n    fileName,\n    size,\n    downloadUrl,\n    webUrl,\n    mimeType,\n  },\n})\n\nconst buildVideo = (\n  providerId: string,\n  type: VideoType,\n  name: string,\n  {\n    id,\n    name: fileName,\n    size,\n    webUrl,\n    '@microsoft.graph.downloadUrl': downloadUrl,\n  }: DriveItemResponse,\n  { mimeType }: FileResponse,\n  {\n    bitrate,\n    duration,\n    height,\n    width,\n    audioChannels,\n    audioFormat,\n    fourCC,\n    frameRate,\n  }: VideoResponse,\n): Video => ({\n  kind: FileKind.Video,\n  type,\n  id: buildFileId(ProviderKind.OneDrive, id),\n  name,\n  provider: {\n    kind: ProviderKind.OneDrive,\n    providerId,\n    id,\n    fileName,\n    size,\n    downloadUrl,\n    webUrl,\n    mimeType,\n    bitrate,\n    duration,\n    height,\n    width,\n    audioChannels,\n    audioFormat,\n    fourCC,\n    frameRate,\n  },\n})\n\nexport const buildFile = (providerId: string) => (\n  response: DriveItemResponse,\n): File | undefined => {\n  if (response.file === undefined) return\n\n  const { name, extension } = parseFileName(response.name)\n  if (extension === undefined) return\n\n  const captionType = parseCaptionType(extension)\n  const videoType = parseVideoType(extension)\n\n  if (captionType !== undefined)\n    return buildCaption(providerId, captionType, name, response, response.file)\n  else if (videoType !== undefined && response.video !== undefined)\n    return buildVideo(\n      providerId,\n      videoType,\n      name,\n      response,\n      response.file,\n      response.video,\n    )\n}\n","import { FileKind, IFile } from '../File'\nimport { CaptionProvider } from '../FileProvider'\n\nexport const VTT_EXTENSION = 'vtt'\n\nexport type CaptionType = typeof VTT_EXTENSION\n\nexport interface Caption extends IFile<CaptionProvider> {\n  kind: typeof FileKind.Caption\n  type: CaptionType\n}\n","import {\n  EpisodeIndexResponse,\n  IndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n  ShowIndexResponse,\n} from '../types'\nimport {\n  fetchItem,\n  fetchItemChildren,\n  fetchPathChildren,\n  getClient,\n} from './api'\nimport { CannotFindFileError } from '../../../errors/CannotFindFileError'\nimport { Client } from '@microsoft/microsoft-graph-client'\nimport { File } from '../../../types/files/File'\nimport { buildFile } from './util'\nimport { notUndefined } from '../../../util'\n\nexport const updateFile = async (\n  providerId: string,\n  accessToken: string,\n  file: File,\n): Promise<File> => {\n  const client = getClient(accessToken)\n  const response = await fetchItem(client, file.provider.id)\n  const newFile = buildFile(providerId)(response)\n\n  if (newFile !== undefined) return newFile\n  else throw new CannotFindFileError(file)\n}\n\nconst indexFiles = async (\n  providerId: string,\n  client: Client,\n  folderId: string,\n): Promise<File[]> => {\n  const { value: filesResponse } = await fetchItemChildren(client, folderId)\n\n  return filesResponse.map(buildFile(providerId)).filter(notUndefined)\n}\n\nconst indexMovies = async (\n  providerId: string,\n  client: Client,\n  path: string | undefined,\n): Promise<MovieIndexResponse[]> => {\n  if (path === undefined) return []\n\n  const { value: moviesResponse } = await fetchPathChildren(client, path)\n\n  return Promise.all(\n    moviesResponse.map(async (movieResponse) => ({\n      name: movieResponse.name,\n      files: await indexFiles(providerId, client, movieResponse.id),\n    })),\n  )\n}\n\nconst indexEpisodes = async (\n  providerId: string,\n  client: Client,\n  seasonFolderId: string,\n): Promise<EpisodeIndexResponse[]> => {\n  const { value: episodesResponse } = await fetchItemChildren(\n    client,\n    seasonFolderId,\n  )\n\n  const episodes = await Promise.all(\n    episodesResponse.map(async (episodeResponse) => {\n      const number = Number.parseInt(episodeResponse.name)\n      if (isNaN(number)) return\n\n      return {\n        number,\n        files: await indexFiles(providerId, client, episodeResponse.id),\n      }\n    }),\n  )\n\n  return episodes.filter(notUndefined)\n}\n\nconst indexSeasons = async (\n  providerId: string,\n  client: Client,\n  showFolderId: string,\n): Promise<SeasonIndexResponse[]> => {\n  const { value: seasonsResponse } = await fetchItemChildren(\n    client,\n    showFolderId,\n  )\n\n  const seasons = await Promise.all(\n    seasonsResponse.map(async (seasonResponse) => {\n      const number = Number.parseInt(seasonResponse.name)\n      if (isNaN(number)) return\n\n      return {\n        number,\n        episodes: await indexEpisodes(providerId, client, seasonResponse.id),\n      }\n    }),\n  )\n\n  return seasons.filter(notUndefined)\n}\n\nconst indexShows = async (\n  providerId: string,\n  client: Client,\n  path: string | undefined,\n): Promise<ShowIndexResponse[]> => {\n  if (path === undefined) return []\n\n  const { value: showsResponse } = await fetchPathChildren(client, path)\n\n  return Promise.all(\n    showsResponse.map(async (showResponse) => ({\n      name: showResponse.name,\n      seasons: await indexSeasons(providerId, client, showResponse.id),\n    })),\n  )\n}\n\nexport const index = async (\n  providerId: string,\n  accessToken: string,\n  moviesPath: string | undefined,\n  showsPath: string | undefined,\n): Promise<IndexResponse> => {\n  const client = getClient(accessToken)\n\n  return {\n    movies: await indexMovies(providerId, client, moviesPath),\n    shows: await indexShows(providerId, client, showsPath),\n  }\n}\n","import {\n  EpisodeIndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n} from './types'\nimport { File, FileKind } from '../../types/files/File'\nimport { Provider, ProviderKind } from '../../types/providers/Provider'\nimport { Caption } from '../../types/files/captions/Caption'\nimport { EpisodeLike } from '../../types/items/Episode'\nimport { ItemKind } from '../../types/items/Item'\nimport { MovieLike } from '../../types/items/Movie'\nimport { SeasonLike } from '../../types/items/Season'\nimport { ShowLike } from '../../types/items/Show'\nimport { Video } from '../../types/files/videos/Video'\nimport { updateFile as oneDriveUpdateFile } from './OneDrive'\n\nconst isCaption = (file: File): file is Caption =>\n  file.kind === FileKind.Caption\n\nconst isVideo = (file: File): file is Video => file.kind === FileKind.Video\n\nexport const buildEpisodeLike = (showTmdbId: number, seasonNumber: number) => (\n  item: EpisodeIndexResponse,\n): EpisodeLike => ({\n  kind: ItemKind.Episode,\n  number: item.number,\n  seasonNumber,\n  showTmdbId,\n  sources: item.files.filter(isVideo),\n  captions: item.files.filter(isCaption),\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const buildMovieLike = (tmdbId: number) => (\n  item: MovieIndexResponse,\n): MovieLike => ({\n  kind: ItemKind.Movie,\n  tmdbId,\n  sources: item.files.filter(isVideo),\n  captions: item.files.filter(isCaption),\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const buildSeasonLike = (showTmdbId: number) => (\n  item: SeasonIndexResponse,\n): SeasonLike => ({\n  kind: ItemKind.Season,\n  number: item.number,\n  showTmdbId,\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const buildShowLike = (tmdbId: number) => (): ShowLike => ({\n  kind: ItemKind.Show,\n  tmdbId,\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const updateFile = (provider: Provider, file: File): Promise<File> => {\n  switch (provider.kind) {\n    case ProviderKind.OneDrive:\n      return oneDriveUpdateFile(provider.id, provider.accessToken.token, file)\n  }\n}\n","import { Episode, EpisodeLike } from '../types/items/Episode'\nimport {\n  EpisodeIndexResponse,\n  IndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n  ShowIndexResponse,\n} from './drives/types'\nimport { Movie, MovieLike } from '../types/items/Movie'\nimport { Provider, ProviderKind } from '../types/providers/Provider'\nimport { Season, SeasonLike } from '../types/items/Season'\nimport { Show, ShowLike } from '../types/items/Show'\nimport {\n  buildEpisodeLike,\n  buildMovieLike,\n  buildSeasonLike,\n  buildShowLike,\n} from './drives'\nimport { findMovie, findShow } from './databases/TMDb/api'\nimport { index as oneDriveIndex } from '../services/drives/OneDrive'\n\nconst handleProvider = (provider: Provider): Promise<IndexResponse> => {\n  switch (provider.kind) {\n    case ProviderKind.OneDrive:\n      return oneDriveIndex(\n        provider.id,\n        provider.accessToken.token,\n        provider.moviesPath,\n        provider.showsPath,\n      )\n  }\n}\n\nconst indexMovies = (\n  moviesResponse: MovieIndexResponse[],\n  fetchMovieMetadata: (movie: MovieLike) => Promise<Movie>,\n) =>\n  Promise.all(\n    moviesResponse.map(async (movieResponse) => {\n      const tmdbId = await findMovie(movieResponse.name)\n      if (tmdbId === undefined) return\n\n      const movieAlike = buildMovieLike(tmdbId)(movieResponse)\n      await fetchMovieMetadata(movieAlike)\n    }),\n  )\n\nconst indexShows = (\n  showsResponse: ShowIndexResponse[],\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n  fetchShowMetadata: (show: ShowLike) => Promise<Show>,\n) =>\n  Promise.all(\n    showsResponse.map(async (showResponse) => {\n      const tmdbId = await findShow(showResponse.name)\n      if (tmdbId === undefined) return\n\n      const showAlike = buildShowLike(tmdbId)()\n      const show = await fetchShowMetadata(showAlike)\n      await indexSeasons(\n        showResponse.seasons,\n        show,\n        fetchEpisodeMetadata,\n        fetchSeasonMetadata,\n      )\n    }),\n  )\n\nconst indexSeasons = (\n  seasonsResponse: SeasonIndexResponse[],\n  show: Show,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n) =>\n  Promise.all(\n    seasonsResponse.map(async (seasonResponse) => {\n      const seasonAlike = buildSeasonLike(show.tmdbId)(seasonResponse)\n      const season = await fetchSeasonMetadata(show, seasonAlike)\n      await indexEpisodes(\n        seasonResponse.episodes,\n        show,\n        season,\n        fetchEpisodeMetadata,\n      )\n    }),\n  )\n\nconst indexEpisodes = (\n  episodesResponse: EpisodeIndexResponse[],\n  show: Show,\n  season: Season,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n) =>\n  Promise.all(\n    episodesResponse.map(async (episodeResponse) => {\n      const episodeAlike = buildEpisodeLike(\n        show.tmdbId,\n        season.number,\n      )(episodeResponse)\n      await fetchEpisodeMetadata(show.id, season.id, episodeAlike)\n    }),\n  )\n\nexport const index = async (\n  provider: Provider,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchMovieMetadata: (movie: MovieLike) => Promise<Movie>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n  fetchShowMetadata: (show: ShowLike) => Promise<Show>,\n) => {\n  const { movies: moviesResponse, shows: showsResponse } = await handleProvider(\n    provider,\n  )\n\n  await indexMovies(moviesResponse, fetchMovieMetadata)\n  await indexShows(\n    showsResponse,\n    fetchEpisodeMetadata,\n    fetchSeasonMetadata,\n    fetchShowMetadata,\n  )\n}\n","import { Episode, EpisodeLike } from '../types/items/Episode'\nimport { Movie, MovieLike } from '../types/items/Movie'\nimport { Season, SeasonLike } from '../types/items/Season'\nimport { Show, ShowLike } from '../types/items/Show'\nimport { episodeSelector, episodesSelector } from './episodes/selectors'\nimport {\n  fetchEpisodeMetadata as fetchEpisodeMetadataCall,\n  fetchMovieMetadata as fetchMovieMetadataCall,\n  fetchSeasonMetadata as fetchSeasonMetadataCall,\n  fetchShowMetadata as fetchShowMetadataCall,\n} from '../services/databases/TMDb'\nimport { movieSelector, moviesSelector } from './movies/selectors'\nimport { seasonSelector, seasonsSelector } from './seasons/selectors'\nimport { showSelector, showsSelector } from './shows/selectors'\nimport { AppThunk } from '.'\nimport { Caption } from '../types/files/captions/Caption'\nimport { File } from '../types/files/File'\nimport { ItemKind } from '../types/items/Item'\nimport { Provider } from '../types/providers/Provider'\nimport { Video } from '../types/files/videos/Video'\nimport { auth as authCall } from './auth/thunks'\nimport { removeFilesByProvider as episodeRemoveFilesByProvider } from './episodes/thunks'\nimport { index as indexCall } from '../services/indexing'\nimport { removeFilesByProvider as movieRemoveFilesByProvider } from './movies/thunks'\nimport { providerSelector } from './auth/selectors'\nimport { removeProvider as removeProviderAction } from './auth/actions'\nimport { updateEpisode } from './episodes/actions'\nimport { updateFile as updateFileCall } from '../services/drives'\nimport { updateMovie } from './movies/actions'\nimport { updateSeason } from './seasons/actions'\nimport { updateShow } from './shows/actions'\n\nexport const index = (providers: Provider[]): AppThunk<Promise<void>> => async (\n  dispatch,\n) => {\n  await Promise.all(\n    providers.map(async (provider) => {\n      const updatedProvider = await dispatch(authCall(provider))\n      if (updatedProvider === undefined)\n        throw new Error(\n          'cannot sign in using the redirect flow while updating files',\n        )\n\n      await indexCall(\n        updatedProvider,\n        (showId: string, seasonId: string, episode: EpisodeLike) =>\n          dispatch(fetchEpisodeMetadata(showId, seasonId, episode)),\n        (movie: MovieLike) => dispatch(fetchMovieMetadata(movie)),\n        (show: Show, season: SeasonLike) =>\n          dispatch(fetchSeasonMetadata(show, season)),\n        (show: ShowLike) => dispatch(fetchShowMetadata(show)),\n      )\n    }),\n  )\n}\n\nconst updateFile = (file: File): AppThunk<Promise<File>> => async (\n  dispatch,\n  getState,\n) => {\n  const { auth } = getState()\n  const provider = providerSelector(file.provider.providerId)(auth)\n  if (provider === undefined)\n    throw new Error('could not find provider for file')\n\n  const updatedProvider = await dispatch(authCall(provider))\n  if (updatedProvider === undefined)\n    throw new Error(\n      'cannot sign in using the redirect flow while updating files',\n    )\n\n  const updatedFile = await updateFileCall(updatedProvider, file)\n\n  return updatedFile\n}\n\nconst handleUpdateWatchableItem = (item: Episode | Movie) => {\n  switch (item.kind) {\n    case ItemKind.Episode:\n      return updateEpisode(item)\n    case ItemKind.Movie:\n      return updateMovie(item)\n  }\n}\n\nexport const updateFiles = (\n  item: Episode | Movie,\n): AppThunk<Promise<Episode | Movie>> => async (dispatch) => {\n  const sources = await Promise.all(\n    item.sources.map(\n      (source) => dispatch(updateFile(source)) as Promise<Video>,\n    ),\n  )\n  const captions = await Promise.all(\n    item.captions.map(\n      (caption) => dispatch(updateFile(caption)) as Promise<Caption>,\n    ),\n  )\n  const updatedItem = {\n    ...item,\n    sources,\n    captions,\n  }\n\n  handleUpdateWatchableItem(updatedItem)\n  return updatedItem\n}\n\nconst fetchEpisodeMetadata = (\n  showId: string,\n  seasonId: string,\n  episode: EpisodeLike,\n): AppThunk<Promise<Episode>> => async (dispatch, getState) => {\n  const { episodes } = getState()\n\n  const newEpisode = await fetchEpisodeMetadataCall(showId, seasonId, episode)\n  const oldEpisode = episodeSelector(newEpisode.id)(episodes)\n  if (oldEpisode !== undefined) newEpisode.usage = oldEpisode.usage\n\n  dispatch(updateEpisode(newEpisode))\n  return newEpisode\n}\n\nconst fetchMovieMetadata = (\n  movie: MovieLike,\n): AppThunk<Promise<Movie>> => async (dispatch, getState) => {\n  const { movies } = getState()\n\n  const newMovie = await fetchMovieMetadataCall(movie)\n  const oldMovie = movieSelector(newMovie.id)(movies)\n  if (oldMovie !== undefined) newMovie.usage = oldMovie.usage\n\n  dispatch(updateMovie(newMovie))\n  return newMovie\n}\n\nconst fetchSeasonMetadata = (\n  show: Show,\n  season: SeasonLike,\n): AppThunk<Promise<Season>> => async (dispatch, getState) => {\n  const { seasons } = getState()\n\n  const newSeason = await fetchSeasonMetadataCall(show, season)\n  const oldSeason = seasonSelector(newSeason.id)(seasons)\n  if (oldSeason !== undefined) newSeason.usage = oldSeason.usage\n\n  dispatch(updateSeason(newSeason))\n  return newSeason\n}\n\nconst fetchShowMetadata = (show: ShowLike): AppThunk<Promise<Show>> => async (\n  dispatch,\n  getState,\n) => {\n  const { shows } = getState()\n\n  const newShow = await fetchShowMetadataCall(show)\n  const oldShow = showSelector(newShow.id)(shows)\n  if (oldShow !== undefined) newShow.usage = oldShow.usage\n\n  dispatch(updateShow(newShow))\n  return newShow\n}\n\nconst fetchEpisodesMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { episodes } = getState()\n\n  await Promise.all(\n    episodesSelector(episodes).map(async (episode) =>\n      dispatch(fetchEpisodeMetadata(episode.showId, episode.seasonId, episode)),\n    ),\n  )\n}\n\nconst fetchMoviesMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { movies } = getState()\n\n  await Promise.all(\n    moviesSelector(movies).map(async (movie) =>\n      dispatch(fetchMovieMetadata(movie)),\n    ),\n  )\n}\n\nconst fetchSeasonsMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { seasons, shows } = getState()\n\n  await Promise.all(\n    seasonsSelector(seasons).map(async (season) => {\n      const show = showSelector(season.showId)(shows)\n      if (show === undefined) throw new Error('cannot find show for season')\n\n      return dispatch(fetchSeasonMetadata(show, season))\n    }),\n  )\n}\n\nconst fetchShowsMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { shows } = getState()\n\n  await Promise.all(\n    showsSelector(shows).map(async (show) => dispatch(fetchShowMetadata(show))),\n  )\n}\n\nexport const fetchAllMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n) => {\n  await dispatch(fetchMoviesMetadata())\n  await dispatch(fetchShowsMetadata())\n  await dispatch(fetchSeasonsMetadata())\n  await dispatch(fetchEpisodesMetadata())\n}\n\nexport const removeProvider = (id: string): AppThunk<void> => (\n  dispatch,\n  getState,\n) => {\n  dispatch(removeProviderAction(id))\n\n  const { episodes, movies } = getState()\n  episodesSelector(episodes).forEach((episode) =>\n    dispatch(episodeRemoveFilesByProvider(episode, id)),\n  )\n  moviesSelector(movies).forEach((movie) =>\n    dispatch(movieRemoveFilesByProvider(movie, id)),\n  )\n}\n","import { EpisodesActionTypes, REMOVE_EPISODE, UPDATE_EPISODE } from './types'\nimport { Episode } from '../../types/items/Episode'\n\nexport const updateEpisode = (episode: Episode): EpisodesActionTypes => ({\n  type: UPDATE_EPISODE,\n  payload: { episode },\n})\n\nexport const removeEpisode = (id: string): EpisodesActionTypes => ({\n  type: REMOVE_EPISODE,\n  payload: { id },\n})\n","import { REMOVE_SEASON, SeasonsActionTypes, UPDATE_SEASON } from './types'\nimport { Season } from '../../types/items/Season'\n\nexport const updateSeason = (season: Season): SeasonsActionTypes => ({\n  type: UPDATE_SEASON,\n  payload: { season },\n})\n\nexport const removeSeason = (id: string): SeasonsActionTypes => ({\n  type: REMOVE_SEASON,\n  payload: { id },\n})\n","import { REMOVE_SHOW, ShowsActionTypes, UPDATE_SHOW } from './types'\nimport { Show } from '../../types/items/Show'\n\nexport const updateShow = (show: Show): ShowsActionTypes => ({\n  type: UPDATE_SHOW,\n  payload: { show },\n})\n\nexport const removeShow = (id: string): ShowsActionTypes => ({\n  type: REMOVE_SHOW,\n  payload: { id },\n})\n","import { AppThunk } from '../index'\nimport { Movie } from '../../types/items/Movie'\nimport { Usage } from '../../types/items/Item'\nimport { updateMovie } from './actions'\n\nexport const updateMovieProgress = (\n  movie: Movie,\n  progress: number,\n): AppThunk<void> => (dispatch) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateMovie({ ...movie, usage }))\n}\n\nexport const removeFilesByProvider = (\n  movie: Movie,\n  providerId: string,\n): AppThunk<void> => (dispatch) => {\n  dispatch(\n    updateMovie({\n      ...movie,\n      sources: movie.sources.filter(\n        (source) => source.provider.providerId !== providerId,\n      ),\n      captions: movie.captions.filter(\n        (caption) => caption.provider.providerId !== providerId,\n      ),\n    }),\n  )\n}\n","import { MoviesActionTypes, REMOVE_MOVIE, UPDATE_MOVIE } from './types'\nimport { Movie } from '../../types/items/Movie'\n\nexport const updateMovie = (movie: Movie): MoviesActionTypes => ({\n  type: UPDATE_MOVIE,\n  payload: { movie },\n})\n\nexport const removeMovie = (id: string): MoviesActionTypes => ({\n  type: REMOVE_MOVIE,\n  payload: { id },\n})\n","import { AppThunk } from '../index'\nimport { Season } from '../../types/items/Season'\nimport { Usage } from '../../types/items/Item'\nimport { showSelector } from '../shows/selectors'\nimport { updateSeason } from './actions'\nimport { updateShowProgress } from '../shows/thunks'\n\nexport const updateSeasonProgress = (\n  season: Season,\n  progress: number,\n): AppThunk<void> => (dispatch, getState) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateSeason({ ...season, usage }))\n\n  const { shows } = getState()\n  const show = showSelector(season.showId)(shows)\n  if (show === undefined) throw new Error('parent show of season undefined')\n\n  dispatch(updateShowProgress(show, season.number))\n}\n","import { AppThunk } from '../index'\nimport { Show } from '../../types/items/Show'\nimport { Usage } from '../../types/items/Item'\nimport { updateShow } from './actions'\n\nexport const updateShowProgress = (\n  show: Show,\n  progress: number,\n): AppThunk<void> => (dispatch) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateShow({ ...show, usage }))\n}\n","import { AppThunk } from '../index'\nimport { Episode } from '../../types/items/Episode'\nimport { Usage } from '../../types/items/Item'\nimport { seasonSelector } from '../seasons/selectors'\nimport { updateEpisode } from './actions'\nimport { updateSeasonProgress } from '../seasons/thunks'\n\nexport const updateEpisodeProgress = (\n  episode: Episode,\n  progress: number,\n): AppThunk<void> => (dispatch, getState) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateEpisode({ ...episode, usage }))\n\n  const { seasons } = getState()\n  const season = seasonSelector(episode.seasonId)(seasons)\n  if (season === undefined)\n    throw new Error('parent season of episode undefined')\n\n  dispatch(updateSeasonProgress(season, episode.number))\n}\n\nexport const removeFilesByProvider = (\n  episode: Episode,\n  providerId: string,\n): AppThunk<void> => (dispatch) => {\n  dispatch(\n    updateEpisode({\n      ...episode,\n      sources: episode.sources.filter(\n        (source) => source.provider.providerId !== providerId,\n      ),\n      captions: episode.captions.filter(\n        (caption) => caption.provider.providerId !== providerId,\n      ),\n    }),\n  )\n}\n"],"sourceRoot":""}