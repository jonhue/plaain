{"version":3,"sources":["components/Back.tsx","components/PlyrPlayer.tsx","components/Player.tsx","views/Player.tsx"],"names":["Back","children","navigate","useNavigate","isDisabled","history","length","handleClick","useCallback","className","classNames","disabled","onClick","findProvider","providers","providerId","provider","find","id","undefined","Error","buildSource","video","src","buildFileDownloadUrl","type","buildVideoType","size","buildVideoSize","buildCaption","caption","kind","label","name","srcLang","buildCaptionSrcLang","PlyrPlayer","item","startAt","onProgress","useSelector","state","providersSelector","auth","useEffect","hasForwarded","player","Plyr","debug","process","controls","settings","autoplay","invertTime","toggleInvert","source","title","sources","map","tracks","captions","on","duration","forward","currentTime","destroy","crossOrigin","playsInline","Player","t","useTranslation","handleReload","window","location","reload","Trans","href","target","rel","PlayerView","dispatch","useDispatch","useLocation","episodes","movies","useState","isNotFound","setIsNotFound","useMemo","rawStartAt","URLSearchParams","search","get","Number","parseInt","rawKind","Object","values","ItemKind","includes","findItem","Episode","episodeSelector","Movie","movieSelector","useAsyncMemo","a","load","updateFiles","updatedItem","handleProgress","progress","updateEpisodeProgress","updateMovieProgress","NotFound","Loading"],"mappings":"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","file":"static/js/8.7ecf621f.chunk.js","sourcesContent":["import './Back.scss'\nimport React, { FunctionComponent, useCallback } from 'react'\nimport classNames from 'classnames'\nimport { useNavigate } from 'react-router-dom'\n\nexport const Back: FunctionComponent = ({ children }) => {\n  const navigate = useNavigate()\n\n  const isDisabled = history.length <= 2\n\n  const handleClick = useCallback(() => navigate(-1), [navigate])\n\n  return (\n    <div\n      className={classNames('Back', { disabled: isDisabled })}\n      onClick={handleClick}\n    >\n      {children}\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport {\n  buildCaptionSrcLang,\n  buildFileDownloadUrl,\n  buildVideoSize,\n  buildVideoType,\n} from '../util'\nimport { Caption } from '../types/files/Caption'\nimport { Episode } from '../types/items/Episode'\nimport { Movie } from '../types/items/Movie'\nimport Plyr from 'plyr'\nimport { Provider } from '../types/providers/Provider'\nimport { RootState } from '../store'\nimport { Video } from '../types/files/Video'\nimport { providersSelector } from '../store/auth/selectors'\nimport { useSelector } from 'react-redux'\n\nconst findProvider = (providers: Provider[], providerId: string) => {\n  const provider = providers.find(({ id }) => id === providerId)\n  if (provider === undefined)\n    throw new Error('Internal error: provider of item does not exist.')\n  return provider\n}\n\nconst buildSource =\n  (providers: Provider[]) =>\n  (video: Video): Plyr.Source => {\n    const provider = findProvider(providers, video.provider.providerId)\n    return {\n      src: buildFileDownloadUrl(provider, video.provider),\n      type: `video/${buildVideoType(video)}`,\n      size: buildVideoSize(video.provider),\n    }\n  }\n\nconst buildCaption =\n  (providers: Provider[]) =>\n  (caption: Caption): Plyr.Track => {\n    const provider = findProvider(providers, caption.provider.providerId)\n    return {\n      kind: 'captions',\n      label: caption.name,\n      srcLang: buildCaptionSrcLang(caption),\n      src: buildFileDownloadUrl(provider, caption.provider),\n    }\n  }\n\ntype PlyrPlayerProps = {\n  id: string\n  item: Movie | Episode\n  startAt?: number\n\n  onProgress: (progress: number) => void\n}\n\nexport const PlyrPlayer = ({\n  id,\n  item,\n  startAt,\n  onProgress,\n}: PlyrPlayerProps) => {\n  const providers = useSelector((state: RootState) =>\n    providersSelector(state.auth),\n  )\n\n  useEffect(() => {\n    let hasForwarded = false\n\n    const player = new Plyr(`video.PlyrPlayer#${id}`, {\n      debug: process.env.NODE_ENV === 'development',\n      controls: [\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'fullscreen',\n      ],\n      settings: ['captions', 'quality'],\n      autoplay: true,\n      invertTime: true,\n      toggleInvert: true,\n    })\n\n    player.source = {\n      type: 'video',\n      title: item.title,\n      sources: item.sources.map(buildSource(providers)),\n      tracks: item.captions.map(buildCaption(providers)),\n    }\n\n    player.on('canplay', () => {\n      if (hasForwarded || startAt === undefined || player.duration < startAt)\n        return\n      player.forward(startAt)\n      hasForwarded = true\n    })\n\n    return () => {\n      if (player.currentTime !== 0) onProgress(player.currentTime)\n\n      player.destroy()\n    }\n  }, [id, item, onProgress, providers, startAt])\n\n  return (\n    <video\n      className=\"PlyrPlayer\"\n      id={id}\n      crossOrigin=\"true\"\n      playsInline\n      controls\n    />\n  )\n}\n","import './Player.scss'\nimport React, { useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { Back } from './Back'\nimport { Episode } from '../types/items/Episode'\nimport { Movie } from '../types/items/Movie'\nimport { PlyrPlayer } from './PlyrPlayer'\n\ntype PlayerProps = {\n  item: Movie | Episode\n  startAt?: number\n\n  onProgress: (progress: number) => void\n}\n\nexport const Player = ({ item, startAt, onProgress }: PlayerProps) => {\n  const { t } = useTranslation()\n\n  const handleReload = useCallback(() => window.location.reload(), [])\n\n  return (\n    <div className=\"Player\">\n      <PlyrPlayer\n        item={item}\n        startAt={startAt}\n        onProgress={onProgress}\n        id=\"player\"\n      />\n      <div className=\"Player__content\">\n        <div className=\"Player__content__header\">\n          <h1>{item.title}</h1>\n          <Back>\n            <button className=\"secondary small\">{t('Go back')}</button>\n          </Back>\n        </div>\n        <div className=\"Player__content__reload\">\n          <p className=\"small\">\n            <Trans>\n              The video doesn&apos;t load? Restarting may help. Please{' '}\n              <a\n                href=\"https://github.com/jonhue/plaain/issues/new\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                report the issue\n              </a>{' '}\n              if it persists.\n            </Trans>\n          </p>\n          <button className=\"small\" onClick={handleReload}>\n            {t('Reload')}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { AppDispatch, RootState } from '../store'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ItemKind } from '../types/items/Item'\nimport { Loading } from './Loading'\nimport { NotFound } from './NotFound'\nimport { Player } from '../components/Player'\nimport { episodeSelector } from '../store/episodes/selectors'\nimport { load } from '../store/ui/thunks'\nimport { movieSelector } from '../store/movies/selectors'\nimport { updateEpisodeProgress } from '../store/episodes/thunks'\nimport { updateFiles } from '../store/thunks'\nimport { updateMovieProgress } from '../store/movies/thunks'\nimport { useAsyncMemo } from 'use-async-memo'\nimport { useLocation } from 'react-router-dom'\n\nconst KIND_PARAMETER = 'type'\nconst ID_PARAMETER = 'id'\nconst START_AT_PARAMETER = 's'\n\nconst PlayerView = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const location = useLocation()\n\n  const { episodes, movies } = useSelector((state: RootState) => ({\n    episodes: state.episodes,\n    movies: state.movies,\n  }))\n\n  const [isNotFound, setIsNotFound] = useState(false)\n\n  const startAt: number | undefined = useMemo(() => {\n    const rawStartAt = new URLSearchParams(location.search).get(\n      START_AT_PARAMETER,\n    )\n    if (rawStartAt === null) return\n\n    return Number.parseInt(rawStartAt)\n  }, [location])\n\n  const kind: ItemKind | undefined = useMemo(() => {\n    const rawKind = new URLSearchParams(location.search).get(KIND_PARAMETER)\n    if (rawKind === null) return\n\n    const kind = Number.parseInt(rawKind)\n\n    if (Object.values(ItemKind).includes(kind)) return kind\n  }, [location])\n\n  const findItem = useCallback(\n    (kind: ItemKind, id: string) => {\n      switch (kind) {\n        case ItemKind.Episode:\n          return episodeSelector(id)(episodes)\n        case ItemKind.Movie:\n          return movieSelector(id)(movies)\n      }\n    },\n    [episodes, movies],\n  )\n\n  const item = useAsyncMemo(async () => {\n    if (kind === undefined) return setIsNotFound(true)\n\n    const id = new URLSearchParams(location.search).get(ID_PARAMETER)\n    if (id === null) return setIsNotFound(true)\n\n    const item = findItem(kind, id)\n    if (item === undefined) return setIsNotFound(true)\n\n    const updatedItem = await dispatch(load(updateFiles(item)))\n    return updatedItem\n  }, [dispatch, kind, location, setIsNotFound])\n\n  const handleProgress = useCallback(\n    (progress: number) => {\n      if (item === undefined) return\n\n      switch (item.kind) {\n        case ItemKind.Episode:\n          return dispatch(updateEpisodeProgress(item, progress))\n        case ItemKind.Movie:\n          return dispatch(updateMovieProgress(item, progress))\n      }\n    },\n    [dispatch, item],\n  )\n\n  return item !== undefined && item.sources.length > 0 ? (\n    <Player item={item} startAt={startAt} onProgress={handleProgress} />\n  ) : isNotFound ? (\n    <NotFound />\n  ) : (\n    <Loading />\n  )\n}\n\nexport default PlayerView\n"],"sourceRoot":""}