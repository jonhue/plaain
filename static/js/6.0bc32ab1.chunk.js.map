{"version":3,"sources":["components/Player.scss","components/Back.tsx","components/PlyrPlayer.tsx","components/Player.tsx","views/Player.tsx"],"names":["module","exports","Back","children","history","useHistory","isDisabled","length","handleClick","useCallback","goBack","className","classNames","disabled","onClick","buildSource","video","src","buildFileDownloadUrl","provider","type","buildVideoType","size","buildVideoSize","buildCaption","caption","kind","label","name","srcLang","buildCaptionSrcLang","PlyrPlayer","id","item","startAt","onProgress","useEffect","player","Plyr","debug","process","controls","settings","autoplay","invertTime","toggleInvert","source","title","sources","map","tracks","captions","on","undefined","forward","currentTime","destroy","crossOrigin","playsInline","Player","t","useTranslation","handleReload","window","location","reload","Trans","href","target","rel","mapDispatch","load","updateEpisodeProgress","updateMovieProgress","connector","connect","state","episodes","movies","useLocation","useState","isNotFound","setIsNotFound","useMemo","rawStartAt","URLSearchParams","search","get","Number","parseInt","rawKind","Object","values","ItemKind","includes","findItem","Episode","episodeSelector","Movie","movieSelector","useAsyncMemo","a","updateFiles","updatedItem","handleProgress","progress","NotFound","Loading"],"mappings":"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","file":"static/js/6.0bc32ab1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"white\":\"#fff\",\"light\":\"#e3e4e9\",\"background\":\"#283057\",\"dark\":\"#182047\",\"black\":\"#000\",\"highlight\":\"#ff2fc1\",\"warn\":\"#fe8a27\",\"brPhone\":\"600px\",\"brPhablet\":\"800px\",\"brTablet\":\"1200px\",\"brLaptop\":\"1600px\",\"brDesktop\":\"2000px\"};","import './Back.scss'\nimport React, { FunctionComponent, useCallback } from 'react'\nimport classNames from 'classnames'\nimport { useHistory } from 'react-router'\n\nconst Back: FunctionComponent = ({ children }) => {\n  const history = useHistory()\n\n  const isDisabled = history.length <= 2\n\n  const handleClick = useCallback(() => history.goBack(), [history])\n\n  return (\n    <div\n      className={classNames('Back', { disabled: isDisabled })}\n      onClick={handleClick}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default Back\n","import React, { useEffect } from 'react'\nimport {\n  buildCaptionSrcLang,\n  buildFileDownloadUrl,\n  buildVideoSize,\n  buildVideoType,\n} from '../util'\nimport { Caption } from '../types/files/captions/Caption'\nimport { Episode } from '../types/items/Episode'\nimport { Movie } from '../types/items/Movie'\nimport Plyr from 'plyr'\nimport { Video } from '../types/files/videos/Video'\n\nconst buildSource = (video: Video): Plyr.Source => ({\n  src: buildFileDownloadUrl(video.provider),\n  type: `video/${buildVideoType(video)}`,\n  size: buildVideoSize(video.provider),\n})\n\nconst buildCaption = (caption: Caption): Plyr.Track => ({\n  kind: 'captions',\n  label: caption.name,\n  srcLang: buildCaptionSrcLang(caption),\n  src: buildFileDownloadUrl(caption.provider),\n})\n\ntype PlyrPlayerProps = {\n  id: string\n  item: Movie | Episode\n  startAt?: number\n\n  onProgress: (progress: number) => void\n}\n\nconst PlyrPlayer = ({ id, item, startAt, onProgress }: PlyrPlayerProps) => {\n  useEffect(() => {\n    const player = new Plyr(`video.PlyrPlayer#${id}`, {\n      debug: process.env.NODE_ENV === 'development',\n      controls: [\n        'play',\n        'progress',\n        'current-time',\n        'mute',\n        'volume',\n        'captions',\n        'settings',\n        'fullscreen',\n      ],\n      settings: ['captions', 'quality'],\n      autoplay: true,\n      invertTime: true,\n      toggleInvert: true,\n    })\n\n    player.source = {\n      type: 'video',\n      title: item.title,\n      sources: item.sources.map(buildSource),\n      tracks: item.captions.map(buildCaption),\n    }\n\n    player.on('ready', () => {\n      if (startAt !== undefined) player.forward(startAt)\n    })\n\n    return () => {\n      if (player.currentTime !== 0) onProgress(player.currentTime)\n\n      player.destroy()\n    }\n  }, [id, item, onProgress, startAt])\n\n  return (\n    <video\n      className=\"PlyrPlayer\"\n      id={id}\n      crossOrigin=\"true\"\n      playsInline\n      controls\n    />\n  )\n}\n\nexport default PlyrPlayer\n","import './Player.scss'\nimport React, { useCallback } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport Back from './Back'\nimport { Episode } from '../types/items/Episode'\nimport { Movie } from '../types/items/Movie'\nimport PlyrPlayer from './PlyrPlayer'\n\ntype PlayerProps = {\n  item: Movie | Episode\n  startAt?: number\n\n  onProgress: (progress: number) => void\n}\n\nconst Player = ({ item, startAt, onProgress }: PlayerProps) => {\n  const { t } = useTranslation()\n\n  const handleReload = useCallback(() => window.location.reload(), [])\n\n  return (\n    <div className=\"Player\">\n      <PlyrPlayer\n        item={item}\n        startAt={startAt}\n        onProgress={onProgress}\n        id=\"player\"\n      />\n      <div className=\"Player__content\">\n        <div className=\"Player__content__header\">\n          <h1>{item.title}</h1>\n          <Back>\n            <button className=\"secondary\">{t('Go back')}</button>\n          </Back>\n        </div>\n        <div className=\"Player__content__reload\">\n          <p className=\"small\">\n            <Trans>\n              The video doesn&apos;t load? Restarting may help. Please{' '}\n              <a\n                href=\"https://github.com/jonhue/plaain/issues/new\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                report the issue\n              </a>{' '}\n              if it persists.\n            </Trans>\n          </p>\n          <button onClick={handleReload}>{t('Reload')}</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Player\n","import { ConnectedProps, connect } from 'react-redux'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Episode } from '../types/items/Episode'\nimport { ItemKind } from '../types/items/Item'\nimport Loading from './Loading'\nimport { Movie } from '../types/items/Movie'\nimport NotFound from './NotFound'\nimport Player from '../components/Player'\nimport { RootState } from '../store'\nimport { episodeSelector } from '../store/episodes/selectors'\nimport { load } from '../store/ui/thunks'\nimport { movieSelector } from '../store/movies/selectors'\nimport { updateEpisodeProgress } from '../store/episodes/thunks'\nimport { updateFiles } from '../store/thunks'\nimport { updateMovieProgress } from '../store/movies/thunks'\nimport { useAsyncMemo } from 'use-async-memo'\nimport { useLocation } from 'react-router'\n\nconst KIND_PARAMETER = 'type'\nconst ID_PARAMETER = 'id'\nconst START_AT_PARAMETER = 's'\n\nconst mapState = (state: RootState) => ({\n  episodes: state.episodes,\n  movies: state.movies,\n})\nconst mapDispatch = { load, updateEpisodeProgress, updateMovieProgress }\n\nconst connector = connect(mapState, mapDispatch)\n\ntype PlayerViewProps = ConnectedProps<typeof connector>\n\nconst PlayerView = ({\n  episodes,\n  movies,\n  load,\n  updateEpisodeProgress,\n  updateMovieProgress,\n}: PlayerViewProps) => {\n  const location = useLocation()\n\n  const [isNotFound, setIsNotFound] = useState(false)\n\n  const startAt: number | undefined = useMemo(() => {\n    const rawStartAt = new URLSearchParams(location.search).get(\n      START_AT_PARAMETER,\n    )\n    if (rawStartAt === null) return\n\n    return Number.parseInt(rawStartAt)\n  }, [location])\n\n  const kind: ItemKind | undefined = useMemo(() => {\n    const rawKind = new URLSearchParams(location.search).get(KIND_PARAMETER)\n    if (rawKind === null) return\n\n    const kind = Number.parseInt(rawKind)\n\n    if (Object.values(ItemKind).includes(kind)) return kind\n  }, [location])\n\n  const findItem = useCallback(\n    (kind: ItemKind, id: string) => {\n      switch (kind) {\n        case ItemKind.Episode:\n          return episodeSelector(id)(episodes)\n        case ItemKind.Movie:\n          return movieSelector(id)(movies)\n      }\n    },\n    [episodes, movies],\n  )\n\n  const item = useAsyncMemo(async () => {\n    if (kind === undefined) return setIsNotFound(true)\n\n    const id = new URLSearchParams(location.search).get(ID_PARAMETER)\n    if (id === null) return setIsNotFound(true)\n\n    const item = findItem(kind, id)\n    if (item === undefined) return setIsNotFound(true)\n\n    const updatedItem = (await load(updateFiles(item))) as Episode | Movie\n    return updatedItem\n  }, [kind, load, location, setIsNotFound])\n\n  const handleProgress = useCallback(\n    (progress: number) => {\n      if (item === undefined) return\n\n      switch (item.kind) {\n        case ItemKind.Episode:\n          return updateEpisodeProgress(item, progress)\n        case ItemKind.Movie:\n          return updateMovieProgress(item, progress)\n      }\n    },\n    [item, updateEpisodeProgress, updateMovieProgress],\n  )\n\n  return item !== undefined && item.sources.length > 0 ? (\n    <Player item={item} startAt={startAt} onProgress={handleProgress} />\n  ) : isNotFound ? (\n    <NotFound />\n  ) : (\n    <Loading />\n  )\n}\n\nexport default connector(PlayerView)\n"],"sourceRoot":""}