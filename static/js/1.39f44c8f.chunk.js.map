{"version":3,"sources":["store/movies/selectors.ts","store/shows/selectors.ts","store/seasons/selectors.ts","store/auth/selectors.ts","store/episodes/selectors.ts","store/auth/actions.ts","services/http.ts","types/files/File.ts","services/databases/TMDb/api.ts","services/databases/TMDb/index.ts","services/drives/OneDrive/api.ts","services/drives/util.ts","services/drives/OneDrive/util.ts","types/files/captions/Caption.ts","services/drives/OneDrive/index.ts","services/drives/index.tsx","services/indexing.ts","store/thunks.ts","store/ui/thunks.ts","errors/index.ts","errors/APIError.ts","errors/ProviderAlreadyExists.ts","errors/AuthenticationFailure.ts","store/episodes/actions.ts","store/seasons/actions.ts","store/shows/actions.ts","errors/CannotFindFileError.ts","store/movies/thunks.ts","store/movies/actions.ts","store/seasons/thunks.ts","store/shows/thunks.ts","store/episodes/thunks.ts","services/auth/OneDrive.ts","services/auth/util.ts","store/auth/thunks.ts"],"names":["movieSelector","id","state","moviesSelector","Object","keys","map","inProgressSelector","filter","isInProgress","recentlyWatchedSelector","movie","wasRecentlyWatched","RECENTLY_WATCHED_THRESHOLD","moviesByPersonSelector","createSelector","movies","cast","find","person","crew","moviesPersonSelector","fn","reduce","acc","people","concat","showSelector","showsSelector","seasonSelector","seasonsSelector","season","seasonsByShowSelector","showId","seasons","seasonsByPersonSelector","seasonsPersonSelector","providerSelector","providers","providersSelector","episodeSelector","episodesSelector","episodesBySeasonSelector","seasonId","episodes","episode","updateProvider","provider","type","UPDATE_PROVIDER","payload","removeProvider","REMOVE_PROVIDER","HttpMethod","FileKind","buildUrl","baseUrl","path","params","url","URL","undefined","entries","key","value","searchParams","append","http","method","accessToken","a","fetch","href","headers","Authorization","Accept","response","text","body","JSON","parse","ok","APIError","status","statusText","get","GET","BASE_URL","ACCESS_TOKEN","process","PARAMS","language","i18next","languages","findMovie","query","results","length","findShow","fetchMovieCredits","fetchSeasonCredits","seasonNumber","fetchEpisode","episodeNumber","fetchEpisodeMetadata","showTmdbId","number","buildEpisode","fetchMovieMetadata","tmdbId","creditsResponse","buildMovie","fetchSeasonMetadata","show","buildSeason","fetchShowMetadata","buildShow","getClient","Client","init","authProvider","done","fetchPathChildren","client","api","fetchItem","itemId","fetchItemChildren","buildFileId","kind","buildFile","providerId","file","fileName","name","split","shift","extension","pop","captionType","parseCaptionType","videoType","MP4_EXTENSION","M4V_EXTENSION","MKV_EXTENSION","WEBM_EXTENSION","parseVideoType","size","webUrl","downloadUrl","mimeType","Caption","ProviderKind","OneDrive","buildCaption","video","bitrate","duration","height","width","audioChannels","audioFormat","fourCC","frameRate","Video","buildVideo","updateFile","newFile","CannotFindFileError","indexFiles","folderId","filesResponse","notUndefined","indexMovies","moviesResponse","Promise","all","movieResponse","files","indexEpisodes","seasonFolderId","episodesResponse","episodeResponse","Number","parseInt","isNaN","indexSeasons","showFolderId","seasonsResponse","seasonResponse","indexShows","showsResponse","showResponse","index","moviesPath","showsPath","shows","isCaption","isVideo","buildEpisodeLike","item","ItemKind","Episode","sources","captions","usage","lastWatched","progress","buildMovieLike","Movie","buildSeasonLike","Season","buildShowLike","Show","oneDriveUpdateFile","token","handleProvider","oneDriveIndex","movieAlike","showAlike","seasonAlike","episodeAlike","dispatch","authCall","updatedProvider","indexCall","getState","auth","Error","updateFileCall","updatedFile","handleUpdateWatchableItem","updateEpisode","updateMovie","updateFiles","source","caption","updatedItem","fetchEpisodeMetadataCall","newEpisode","oldEpisode","fetchMovieMetadataCall","newMovie","oldMovie","fetchSeasonMetadataCall","newSeason","oldSeason","updateSeason","fetchShowMetadataCall","newShow","oldShow","updateShow","fetchAllMetadata","removeProviderAction","forEach","episodeRemoveFilesByProvider","movieRemoveFilesByProvider","load","asyncBegin","result","addNotification","error","NotificationKind","message","AuthenticationFailure","CannotFindFile","ProviderAlreadyExists","GenericError","asyncEnd","captureStackTrace","UPDATE_EPISODE","UPDATE_SEASON","UPDATE_SHOW","updateMovieProgress","Date","toISOString","removeFilesByProvider","UPDATE_MOVIE","updateSeasonProgress","updateShowProgress","updateEpisodeProgress","CLIENT_ID","SCOPES","buildAuthResponse","expiresOn","validUntil","silentLogIn","userAgentApplication","acquireTokenSilent","scopes","account","userName","popupLogIn","loginPopup","prompt","performAuth","allowSilent","UserAgentApplication","clientId","authHandleProvider","oneDriveAuthCall","setupAuthHandleProvider","setupAuth","_"],"mappings":"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","file":"static/js/1.39f44c8f.chunk.js","sourcesContent":["import { isInProgress, wasRecentlyWatched } from '../../util'\nimport { Movie } from '../../types/items/Movie'\nimport { MoviesState } from './types'\nimport { Person } from '../../types/items/Person'\nimport { RECENTLY_WATCHED_THRESHOLD } from '../../constants'\nimport { createSelector } from 'reselect'\n\nexport const movieSelector = (id: string) => (state: MoviesState) => state[id]\n\nexport const moviesSelector = (state: MoviesState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const inProgressSelector = (state: MoviesState) =>\n  moviesSelector(state).filter(isInProgress)\n\nexport const recentlyWatchedSelector = (state: MoviesState) =>\n  moviesSelector(state).filter((movie) =>\n    wasRecentlyWatched(movie, RECENTLY_WATCHED_THRESHOLD),\n  )\n\nexport const moviesByPersonSelector = (id: string) =>\n  createSelector(moviesSelector, (movies) =>\n    movies.filter(\n      (movie) =>\n        movie.cast.find((person) => person.id === id) ||\n        movie.crew.find((person) => person.id === id),\n    ),\n  )\n\nexport const moviesPersonSelector = (\n  id: string,\n  fn: (movie: Movie) => Person[],\n) =>\n  createSelector(moviesSelector, (movies) =>\n    movies\n      .map(fn)\n      .reduce((acc, people) => acc.concat(people), [])\n      .filter((person) => person.id === id),\n  )\n","import { ShowsState } from './types'\n\nexport const showSelector = (id: string) => (state: ShowsState) => state[id]\n\nexport const showsSelector = (state: ShowsState) =>\n  Object.keys(state).map((id) => state[id]!)\n","import { isInProgress, wasRecentlyWatched } from '../../util'\nimport { Person } from '../../types/items/Person'\nimport { RECENTLY_WATCHED_THRESHOLD } from '../../constants'\nimport { Season } from '../../types/items/Season'\nimport { SeasonsState } from './types'\nimport { createSelector } from 'reselect'\n\nexport const seasonSelector = (id: string) => (state: SeasonsState) => state[id]\n\nexport const seasonsSelector = (state: SeasonsState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const inProgressSelector = (state: SeasonsState) =>\n  seasonsSelector(state).filter(isInProgress)\n\nexport const recentlyWatchedSelector = (state: SeasonsState) =>\n  seasonsSelector(state).filter((season) =>\n    wasRecentlyWatched(season, RECENTLY_WATCHED_THRESHOLD),\n  )\n\nexport const seasonsByShowSelector = (showId: string) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons.filter((season) => season.showId === showId),\n  )\n\nexport const seasonsByPersonSelector = (id: string) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons.filter(\n      (season) =>\n        season.cast.find((person) => person.id === id) ||\n        season.crew.find((person) => person.id === id),\n    ),\n  )\n\nexport const seasonsPersonSelector = (\n  id: string,\n  fn: (season: Season) => Person[],\n) =>\n  createSelector(seasonsSelector, (seasons) =>\n    seasons\n      .map(fn)\n      .reduce((acc, people) => acc.concat(people), [])\n      .filter((person) => person.id === id),\n  )\n","import { AuthState } from './types'\n\nexport const providerSelector = (id: string) => (state: AuthState) =>\n  state.providers[id]\n\nexport const providersSelector = (state: AuthState) =>\n  Object.keys(state.providers).map((id) => state.providers[id]!)\n","import { EpisodesState } from './types'\nimport { createSelector } from 'reselect'\n\nexport const episodeSelector = (id: string) => (state: EpisodesState) =>\n  state[id]\n\nexport const episodesSelector = (state: EpisodesState) =>\n  Object.keys(state).map((id) => state[id]!)\n\nexport const episodesBySeasonSelector = (seasonId: string) =>\n  createSelector(episodesSelector, (episodes) =>\n    episodes.filter((episode) => episode.seasonId === seasonId),\n  )\n","import {\n  AuthActionTypes,\n  REMOVE_PROVIDER,\n  UPDATE_PROVIDER,\n  UPDATE_VERSION,\n} from './types'\nimport { Provider } from '../../types/providers/Provider'\n\nexport const updateProvider = (provider: Provider): AuthActionTypes => ({\n  type: UPDATE_PROVIDER,\n  payload: {\n    provider,\n  },\n})\n\nexport const updateVersion = (version: string): AuthActionTypes => ({\n  type: UPDATE_VERSION,\n  payload: { version },\n})\n\nexport const removeProvider = (id: string): AuthActionTypes => ({\n  type: REMOVE_PROVIDER,\n  payload: { id },\n})\n","import { APIError } from '../errors/APIError'\n\nenum HttpMethod {\n  GET = 'GET',\n}\n\ntype Params = Record<string, string>\n\nconst buildUrl = (baseUrl: string, path: string, params?: Params) => {\n  const url = new URL(`${baseUrl}/${path}`)\n\n  if (params !== undefined)\n    for (const [key, value] of Object.entries(params))\n      url.searchParams.append(key, value)\n\n  return url\n}\n\nconst http = async <T>(\n  baseUrl: string,\n  path: string,\n  method: HttpMethod,\n  accessToken: string,\n  params?: Params,\n): Promise<T> => {\n  const response = await fetch(buildUrl(baseUrl, path, params).href, {\n    method,\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n\n  // check if response is empty\n  // if empty just return an empty object\n  const text = await response.text()\n  const body = text ? JSON.parse(text) : {}\n\n  if (response.ok) return body\n  else throw new APIError(response.status, response.statusText)\n}\n\nexport const get = <T>(\n  baseUrl: string,\n  path: string,\n  accessToken: string,\n  params: Params,\n) => http<T>(baseUrl, path, HttpMethod.GET, accessToken, params)\n","import { Caption } from './captions/Caption'\nimport { FileProvider } from './FileProvider'\nimport { Video } from './videos/Video'\n\nexport enum FileKind {\n  Video,\n  Caption,\n}\n\nexport interface IFile<T extends FileProvider> {\n  kind: FileKind\n  id: string\n  name: string\n  provider: T\n}\n\nexport type File = Caption | Video\n","import {\n  MovieCreditsResponse,\n  MovieDetailsResponse,\n  SearchMoviesResponse,\n  SearchTVShowsResponse,\n  TVEpisodeResponse,\n  TVSeasonCreditsResponse,\n  TVSeasonDetailsResponse,\n  TVShowDetailsResponse,\n} from './types'\nimport { get } from '../../http'\nimport i18next from 'i18next'\n\nconst BASE_URL = 'https://api.themoviedb.org/3'\nconst ACCESS_TOKEN = process.env.REACT_APP_TMDB_API_READ_ACCESS_TOKEN!\nconst PARAMS = {\n  language: i18next.languages[0],\n}\n\nexport const findMovie = async (query: string) => {\n  const { results } = await get<SearchMoviesResponse>(\n    BASE_URL,\n    'search/movie',\n    ACCESS_TOKEN,\n    { ...PARAMS, query },\n  )\n\n  if (results.length === 0) return undefined\n  else return results[0].id\n}\n\nexport const findShow = async (query: string) => {\n  const { results } = await get<SearchTVShowsResponse>(\n    BASE_URL,\n    'search/tv',\n    ACCESS_TOKEN,\n    { ...PARAMS, query },\n  )\n\n  if (results.length === 0) return undefined\n  else return results[0].id\n}\n\nexport const fetchMovie = (id: number) =>\n  get<MovieDetailsResponse>(BASE_URL, `movie/${id}`, ACCESS_TOKEN, PARAMS)\n\nexport const fetchMovieCredits = (id: number) =>\n  get<MovieCreditsResponse>(\n    BASE_URL,\n    `movie/${id}/credits`,\n    ACCESS_TOKEN,\n    PARAMS,\n  )\n\nexport const fetchShow = (id: number) =>\n  get<TVShowDetailsResponse>(BASE_URL, `tv/${id}`, ACCESS_TOKEN, PARAMS)\n\nexport const fetchSeason = (showId: number, seasonNumber: number) =>\n  get<TVSeasonDetailsResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}`,\n    ACCESS_TOKEN,\n    PARAMS,\n  )\n\nexport const fetchSeasonCredits = (showId: number, seasonNumber: number) =>\n  get<TVSeasonCreditsResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}/credits`,\n    ACCESS_TOKEN,\n    PARAMS,\n  )\n\nexport const fetchEpisode = (\n  showId: number,\n  seasonNumber: number,\n  episodeNumber: number,\n) =>\n  get<TVEpisodeResponse>(\n    BASE_URL,\n    `tv/${showId}/season/${seasonNumber}/episode/${episodeNumber}`,\n    ACCESS_TOKEN,\n    PARAMS,\n  )\n","import { Episode, EpisodeLike } from '../../../types/items/Episode'\nimport { Movie, MovieLike } from '../../../types/items/Movie'\nimport { Season, SeasonLike } from '../../../types/items/Season'\nimport { Show, ShowLike } from '../../../types/items/Show'\nimport { buildEpisode, buildMovie, buildSeason, buildShow } from './util'\nimport {\n  fetchEpisode,\n  fetchMovie,\n  fetchMovieCredits,\n  fetchSeason,\n  fetchSeasonCredits,\n  fetchShow,\n} from './api'\n\nexport const fetchEpisodeMetadata = async (\n  showId: string,\n  seasonId: string,\n  episode: EpisodeLike,\n): Promise<Episode> => {\n  const response = await fetchEpisode(\n    episode.showTmdbId,\n    episode.seasonNumber,\n    episode.number,\n  )\n\n  return buildEpisode(showId, seasonId, episode, response)\n}\n\nexport const fetchMovieMetadata = async (movie: MovieLike): Promise<Movie> => {\n  const response = await fetchMovie(movie.tmdbId)\n  const creditsResponse = await fetchMovieCredits(movie.tmdbId)\n\n  return buildMovie(movie, response, creditsResponse)\n}\n\nexport const fetchSeasonMetadata = async (\n  show: Show,\n  season: SeasonLike,\n): Promise<Season> => {\n  const response = await fetchSeason(season.showTmdbId, season.number)\n  const creditsResponse = await fetchSeasonCredits(\n    season.showTmdbId,\n    season.number,\n  )\n\n  return buildSeason(show, season, response, creditsResponse)\n}\n\nexport const fetchShowMetadata = async (show: ShowLike): Promise<Show> => {\n  const response = await fetchShow(show.tmdbId)\n\n  return buildShow(show, response)\n}\n","import { DriveItemChildrenResponse, DriveItemResponse } from './types'\nimport { Client } from '@microsoft/microsoft-graph-client'\n\nexport const getClient = (accessToken: string) =>\n  Client.init({\n    authProvider: (done) => done(null, accessToken),\n  })\n\nexport const fetchPathChildren = (\n  client: Client,\n  path: string,\n): Promise<DriveItemChildrenResponse> =>\n  client.api(`/me/drive/root:${path}:/children`).get()\n\nexport const fetchItem = (\n  client: Client,\n  itemId: string,\n): Promise<DriveItemResponse> => client.api(`/me/drive/items/${itemId}`).get()\n\nexport const fetchItemChildren = (\n  client: Client,\n  itemId: string,\n): Promise<DriveItemChildrenResponse> =>\n  client.api(`/me/drive/items/${itemId}/children`).get()\n","import { CaptionType, VTT_EXTENSION } from '../../types/files/captions/Caption'\nimport {\n  M4V_EXTENSION,\n  MKV_EXTENSION,\n  MP4_EXTENSION,\n  VideoType,\n  WEBM_EXTENSION,\n} from '../../types/files/videos/Video'\nimport { ProviderKind } from '../../types/providers/Provider'\n\nexport const parseFileName = (fileName: string) => ({\n  name: fileName.split('.').shift()!,\n  extension: fileName.split('.').pop(),\n})\n\nexport const parseCaptionType = (\n  extension: string,\n): CaptionType | undefined => {\n  switch (extension) {\n    case VTT_EXTENSION:\n      return VTT_EXTENSION\n  }\n}\n\nexport const parseVideoType = (extension: string): VideoType | undefined => {\n  switch (extension) {\n    case MP4_EXTENSION:\n      return MP4_EXTENSION\n    case M4V_EXTENSION:\n      return M4V_EXTENSION\n    case MKV_EXTENSION:\n      return MKV_EXTENSION\n    case WEBM_EXTENSION:\n      return WEBM_EXTENSION\n  }\n}\n\nexport const buildFileId = (kind: ProviderKind, id: string) => `${kind}@${id}`\n","import { Caption, CaptionType } from '../../../types/files/captions/Caption'\nimport { DriveItemResponse, FileResponse, VideoResponse } from './types'\nimport { File, FileKind } from '../../../types/files/File'\nimport { Video, VideoType } from '../../../types/files/videos/Video'\nimport {\n  buildFileId,\n  parseCaptionType,\n  parseFileName,\n  parseVideoType,\n} from '../util'\nimport { ProviderKind } from '../../../types/providers/Provider'\n\nconst buildCaption = (\n  providerId: string,\n  type: CaptionType,\n  name: string,\n  {\n    id,\n    name: fileName,\n    size,\n    webUrl,\n    '@microsoft.graph.downloadUrl': downloadUrl,\n  }: DriveItemResponse,\n  { mimeType }: FileResponse,\n): Caption => ({\n  kind: FileKind.Caption,\n  type,\n  id: buildFileId(ProviderKind.OneDrive, id),\n  name,\n  provider: {\n    kind: ProviderKind.OneDrive,\n    providerId,\n    id,\n    fileName,\n    size,\n    downloadUrl,\n    webUrl,\n    mimeType,\n  },\n})\n\nconst buildVideo = (\n  providerId: string,\n  type: VideoType,\n  name: string,\n  {\n    id,\n    name: fileName,\n    size,\n    webUrl,\n    '@microsoft.graph.downloadUrl': downloadUrl,\n  }: DriveItemResponse,\n  { mimeType }: FileResponse,\n  {\n    bitrate,\n    duration,\n    height,\n    width,\n    audioChannels,\n    audioFormat,\n    fourCC,\n    frameRate,\n  }: VideoResponse,\n): Video => ({\n  kind: FileKind.Video,\n  type,\n  id: buildFileId(ProviderKind.OneDrive, id),\n  name,\n  provider: {\n    kind: ProviderKind.OneDrive,\n    providerId,\n    id,\n    fileName,\n    size,\n    downloadUrl,\n    webUrl,\n    mimeType,\n    bitrate,\n    duration,\n    height,\n    width,\n    audioChannels,\n    audioFormat,\n    fourCC,\n    frameRate,\n  },\n})\n\nexport const buildFile = (providerId: string) => (\n  response: DriveItemResponse,\n): File | undefined => {\n  if (response.file === undefined) return\n\n  const { name, extension } = parseFileName(response.name)\n  if (extension === undefined) return\n\n  const captionType = parseCaptionType(extension)\n  const videoType = parseVideoType(extension)\n\n  if (captionType !== undefined)\n    return buildCaption(providerId, captionType, name, response, response.file)\n  else if (videoType !== undefined && response.video !== undefined)\n    return buildVideo(\n      providerId,\n      videoType,\n      name,\n      response,\n      response.file,\n      response.video,\n    )\n}\n","import { FileKind, IFile } from '../File'\nimport { CaptionProvider } from '../FileProvider'\n\nexport const VTT_EXTENSION = 'vtt'\n\nexport type CaptionType = typeof VTT_EXTENSION\n\nexport interface Caption extends IFile<CaptionProvider> {\n  kind: typeof FileKind.Caption\n  type: CaptionType\n}\n","import {\n  EpisodeIndexResponse,\n  IndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n  ShowIndexResponse,\n} from '../types'\nimport {\n  fetchItem,\n  fetchItemChildren,\n  fetchPathChildren,\n  getClient,\n} from './api'\nimport { CannotFindFileError } from '../../../errors/CannotFindFileError'\nimport { Client } from '@microsoft/microsoft-graph-client'\nimport { File } from '../../../types/files/File'\nimport { buildFile } from './util'\nimport { notUndefined } from '../../../util'\n\nexport const updateFile = async (\n  providerId: string,\n  accessToken: string,\n  file: File,\n): Promise<File> => {\n  const client = getClient(accessToken)\n  const response = await fetchItem(client, file.provider.id)\n  const newFile = buildFile(providerId)(response)\n\n  if (newFile !== undefined) return newFile\n  else throw new CannotFindFileError(file)\n}\n\nconst indexFiles = async (\n  providerId: string,\n  client: Client,\n  folderId: string,\n): Promise<File[]> => {\n  const { value: filesResponse } = await fetchItemChildren(client, folderId)\n\n  return filesResponse.map(buildFile(providerId)).filter(notUndefined)\n}\n\nconst indexMovies = async (\n  providerId: string,\n  client: Client,\n  path: string | undefined,\n): Promise<MovieIndexResponse[]> => {\n  if (path === undefined) return []\n\n  const { value: moviesResponse } = await fetchPathChildren(client, path)\n\n  return Promise.all(\n    moviesResponse.map(async (movieResponse) => ({\n      name: movieResponse.name,\n      files: await indexFiles(providerId, client, movieResponse.id),\n    })),\n  )\n}\n\nconst indexEpisodes = async (\n  providerId: string,\n  client: Client,\n  seasonFolderId: string,\n): Promise<EpisodeIndexResponse[]> => {\n  const { value: episodesResponse } = await fetchItemChildren(\n    client,\n    seasonFolderId,\n  )\n\n  const episodes = await Promise.all(\n    episodesResponse.map(async (episodeResponse) => {\n      const number = Number.parseInt(episodeResponse.name)\n      if (isNaN(number)) return\n\n      return {\n        number,\n        files: await indexFiles(providerId, client, episodeResponse.id),\n      }\n    }),\n  )\n\n  return episodes.filter(notUndefined)\n}\n\nconst indexSeasons = async (\n  providerId: string,\n  client: Client,\n  showFolderId: string,\n): Promise<SeasonIndexResponse[]> => {\n  const { value: seasonsResponse } = await fetchItemChildren(\n    client,\n    showFolderId,\n  )\n\n  const seasons = await Promise.all(\n    seasonsResponse.map(async (seasonResponse) => {\n      const number = Number.parseInt(seasonResponse.name)\n      if (isNaN(number)) return\n\n      return {\n        number,\n        episodes: await indexEpisodes(providerId, client, seasonResponse.id),\n      }\n    }),\n  )\n\n  return seasons.filter(notUndefined)\n}\n\nconst indexShows = async (\n  providerId: string,\n  client: Client,\n  path: string | undefined,\n): Promise<ShowIndexResponse[]> => {\n  if (path === undefined) return []\n\n  const { value: showsResponse } = await fetchPathChildren(client, path)\n\n  return Promise.all(\n    showsResponse.map(async (showResponse) => ({\n      name: showResponse.name,\n      seasons: await indexSeasons(providerId, client, showResponse.id),\n    })),\n  )\n}\n\nexport const index = async (\n  providerId: string,\n  accessToken: string,\n  moviesPath: string | undefined,\n  showsPath: string | undefined,\n): Promise<IndexResponse> => {\n  const client = getClient(accessToken)\n\n  return {\n    movies: await indexMovies(providerId, client, moviesPath),\n    shows: await indexShows(providerId, client, showsPath),\n  }\n}\n","import {\n  EpisodeIndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n} from './types'\nimport { File, FileKind } from '../../types/files/File'\nimport { Provider, ProviderKind } from '../../types/providers/Provider'\nimport { Caption } from '../../types/files/captions/Caption'\nimport { EpisodeLike } from '../../types/items/Episode'\nimport { ItemKind } from '../../types/items/Item'\nimport { MovieLike } from '../../types/items/Movie'\nimport { SeasonLike } from '../../types/items/Season'\nimport { ShowLike } from '../../types/items/Show'\nimport { Video } from '../../types/files/videos/Video'\nimport { updateFile as oneDriveUpdateFile } from './OneDrive'\n\nconst isCaption = (file: File): file is Caption =>\n  file.kind === FileKind.Caption\n\nconst isVideo = (file: File): file is Video => file.kind === FileKind.Video\n\nexport const buildEpisodeLike = (showTmdbId: number, seasonNumber: number) => (\n  item: EpisodeIndexResponse,\n): EpisodeLike => ({\n  kind: ItemKind.Episode,\n  number: item.number,\n  seasonNumber,\n  showTmdbId,\n  sources: item.files.filter(isVideo),\n  captions: item.files.filter(isCaption),\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const buildMovieLike = (tmdbId: number) => (\n  item: MovieIndexResponse,\n): MovieLike => ({\n  kind: ItemKind.Movie,\n  tmdbId,\n  sources: item.files.filter(isVideo),\n  captions: item.files.filter(isCaption),\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const buildSeasonLike = (showTmdbId: number) => (\n  item: SeasonIndexResponse,\n): SeasonLike => ({\n  kind: ItemKind.Season,\n  number: item.number,\n  showTmdbId,\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const buildShowLike = (tmdbId: number) => (): ShowLike => ({\n  kind: ItemKind.Show,\n  tmdbId,\n  usage: {\n    lastWatched: undefined,\n    progress: undefined,\n  },\n})\n\nexport const updateFile = (provider: Provider, file: File): Promise<File> => {\n  switch (provider.kind) {\n    case ProviderKind.OneDrive:\n      return oneDriveUpdateFile(provider.id, provider.accessToken.token, file)\n  }\n}\n","import { Episode, EpisodeLike } from '../types/items/Episode'\nimport {\n  EpisodeIndexResponse,\n  IndexResponse,\n  MovieIndexResponse,\n  SeasonIndexResponse,\n  ShowIndexResponse,\n} from './drives/types'\nimport { Movie, MovieLike } from '../types/items/Movie'\nimport { Provider, ProviderKind } from '../types/providers/Provider'\nimport { Season, SeasonLike } from '../types/items/Season'\nimport { Show, ShowLike } from '../types/items/Show'\nimport {\n  buildEpisodeLike,\n  buildMovieLike,\n  buildSeasonLike,\n  buildShowLike,\n} from './drives'\nimport { findMovie, findShow } from './databases/TMDb/api'\nimport { index as oneDriveIndex } from '../services/drives/OneDrive'\n\nconst handleProvider = (provider: Provider): Promise<IndexResponse> => {\n  switch (provider.kind) {\n    case ProviderKind.OneDrive:\n      return oneDriveIndex(\n        provider.id,\n        provider.accessToken.token,\n        provider.moviesPath,\n        provider.showsPath,\n      )\n  }\n}\n\nconst indexMovies = (\n  moviesResponse: MovieIndexResponse[],\n  fetchMovieMetadata: (movie: MovieLike) => Promise<Movie>,\n) =>\n  Promise.all(\n    moviesResponse.map(async (movieResponse) => {\n      const tmdbId = await findMovie(movieResponse.name)\n      if (tmdbId === undefined) return\n\n      const movieAlike = buildMovieLike(tmdbId)(movieResponse)\n      await fetchMovieMetadata(movieAlike)\n    }),\n  )\n\nconst indexShows = (\n  showsResponse: ShowIndexResponse[],\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n  fetchShowMetadata: (show: ShowLike) => Promise<Show>,\n) =>\n  Promise.all(\n    showsResponse.map(async (showResponse) => {\n      const tmdbId = await findShow(showResponse.name)\n      if (tmdbId === undefined) return\n\n      const showAlike = buildShowLike(tmdbId)()\n      const show = await fetchShowMetadata(showAlike)\n      await indexSeasons(\n        showResponse.seasons,\n        show,\n        fetchEpisodeMetadata,\n        fetchSeasonMetadata,\n      )\n    }),\n  )\n\nconst indexSeasons = (\n  seasonsResponse: SeasonIndexResponse[],\n  show: Show,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n) =>\n  Promise.all(\n    seasonsResponse.map(async (seasonResponse) => {\n      const seasonAlike = buildSeasonLike(show.tmdbId)(seasonResponse)\n      const season = await fetchSeasonMetadata(show, seasonAlike)\n      await indexEpisodes(\n        seasonResponse.episodes,\n        show,\n        season,\n        fetchEpisodeMetadata,\n      )\n    }),\n  )\n\nconst indexEpisodes = (\n  episodesResponse: EpisodeIndexResponse[],\n  show: Show,\n  season: Season,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n) =>\n  Promise.all(\n    episodesResponse.map(async (episodeResponse) => {\n      const episodeAlike = buildEpisodeLike(\n        show.tmdbId,\n        season.number,\n      )(episodeResponse)\n      await fetchEpisodeMetadata(show.id, season.id, episodeAlike)\n    }),\n  )\n\nexport const index = async (\n  provider: Provider,\n  fetchEpisodeMetadata: (\n    showId: string,\n    seasonId: string,\n    episode: EpisodeLike,\n  ) => Promise<Episode>,\n  fetchMovieMetadata: (movie: MovieLike) => Promise<Movie>,\n  fetchSeasonMetadata: (show: Show, season: SeasonLike) => Promise<Season>,\n  fetchShowMetadata: (show: ShowLike) => Promise<Show>,\n) => {\n  const { movies: moviesResponse, shows: showsResponse } = await handleProvider(\n    provider,\n  )\n\n  await indexMovies(moviesResponse, fetchMovieMetadata)\n  await indexShows(\n    showsResponse,\n    fetchEpisodeMetadata,\n    fetchSeasonMetadata,\n    fetchShowMetadata,\n  )\n}\n","import { Episode, EpisodeLike } from '../types/items/Episode'\nimport { Movie, MovieLike } from '../types/items/Movie'\nimport { Season, SeasonLike } from '../types/items/Season'\nimport { Show, ShowLike } from '../types/items/Show'\nimport { episodeSelector, episodesSelector } from './episodes/selectors'\nimport {\n  fetchEpisodeMetadata as fetchEpisodeMetadataCall,\n  fetchMovieMetadata as fetchMovieMetadataCall,\n  fetchSeasonMetadata as fetchSeasonMetadataCall,\n  fetchShowMetadata as fetchShowMetadataCall,\n} from '../services/databases/TMDb'\nimport { movieSelector, moviesSelector } from './movies/selectors'\nimport { seasonSelector, seasonsSelector } from './seasons/selectors'\nimport { showSelector, showsSelector } from './shows/selectors'\nimport { AppThunk } from '.'\nimport { Caption } from '../types/files/captions/Caption'\nimport { File } from '../types/files/File'\nimport { ItemKind } from '../types/items/Item'\nimport { Provider } from '../types/providers/Provider'\nimport { Video } from '../types/files/videos/Video'\nimport { auth as authCall } from './auth/thunks'\nimport { removeFilesByProvider as episodeRemoveFilesByProvider } from './episodes/thunks'\nimport { index as indexCall } from '../services/indexing'\nimport { removeFilesByProvider as movieRemoveFilesByProvider } from './movies/thunks'\nimport { providerSelector } from './auth/selectors'\nimport { removeProvider as removeProviderAction } from './auth/actions'\nimport { updateEpisode } from './episodes/actions'\nimport { updateFile as updateFileCall } from '../services/drives'\nimport { updateMovie } from './movies/actions'\nimport { updateSeason } from './seasons/actions'\nimport { updateShow } from './shows/actions'\n\nexport const index = (providers: Provider[]): AppThunk<Promise<void>> => async (\n  dispatch,\n) => {\n  await Promise.all(\n    providers.map(async (provider) => {\n      const updatedProvider = await dispatch(authCall(provider))\n\n      await indexCall(\n        updatedProvider,\n        (showId: string, seasonId: string, episode: EpisodeLike) =>\n          dispatch(fetchEpisodeMetadata(showId, seasonId, episode)),\n        (movie: MovieLike) => dispatch(fetchMovieMetadata(movie)),\n        (show: Show, season: SeasonLike) =>\n          dispatch(fetchSeasonMetadata(show, season)),\n        (show: ShowLike) => dispatch(fetchShowMetadata(show)),\n      )\n    }),\n  )\n}\n\nconst updateFile = (file: File): AppThunk<Promise<File>> => async (\n  dispatch,\n  getState,\n) => {\n  const { auth } = getState()\n  const provider = providerSelector(file.provider.providerId)(auth)\n  if (provider === undefined)\n    throw new Error('could not find provider for file')\n\n  const updatedProvider = await dispatch(authCall(provider))\n  const updatedFile = await updateFileCall(updatedProvider, file)\n\n  return updatedFile\n}\n\nconst handleUpdateWatchableItem = (item: Episode | Movie) => {\n  switch (item.kind) {\n    case ItemKind.Episode:\n      return updateEpisode(item)\n    case ItemKind.Movie:\n      return updateMovie(item)\n  }\n}\n\nexport const updateFiles = (\n  item: Episode | Movie,\n): AppThunk<Promise<Episode | Movie>> => async (dispatch) => {\n  const sources = await Promise.all(\n    item.sources.map(\n      (source) => dispatch(updateFile(source)) as Promise<Video>,\n    ),\n  )\n  const captions = await Promise.all(\n    item.captions.map(\n      (caption) => dispatch(updateFile(caption)) as Promise<Caption>,\n    ),\n  )\n  const updatedItem = {\n    ...item,\n    sources,\n    captions,\n  }\n\n  handleUpdateWatchableItem(updatedItem)\n  return updatedItem\n}\n\nconst fetchEpisodeMetadata = (\n  showId: string,\n  seasonId: string,\n  episode: EpisodeLike,\n): AppThunk<Promise<Episode>> => async (dispatch, getState) => {\n  const { episodes } = getState()\n\n  const newEpisode = await fetchEpisodeMetadataCall(showId, seasonId, episode)\n  const oldEpisode = episodeSelector(newEpisode.id)(episodes)\n  if (oldEpisode !== undefined) newEpisode.usage = oldEpisode.usage\n\n  dispatch(updateEpisode(newEpisode))\n  return newEpisode\n}\n\nconst fetchMovieMetadata = (\n  movie: MovieLike,\n): AppThunk<Promise<Movie>> => async (dispatch, getState) => {\n  const { movies } = getState()\n\n  const newMovie = await fetchMovieMetadataCall(movie)\n  const oldMovie = movieSelector(newMovie.id)(movies)\n  if (oldMovie !== undefined) newMovie.usage = oldMovie.usage\n\n  dispatch(updateMovie(newMovie))\n  return newMovie\n}\n\nconst fetchSeasonMetadata = (\n  show: Show,\n  season: SeasonLike,\n): AppThunk<Promise<Season>> => async (dispatch, getState) => {\n  const { seasons } = getState()\n\n  const newSeason = await fetchSeasonMetadataCall(show, season)\n  const oldSeason = seasonSelector(newSeason.id)(seasons)\n  if (oldSeason !== undefined) newSeason.usage = oldSeason.usage\n\n  dispatch(updateSeason(newSeason))\n  return newSeason\n}\n\nconst fetchShowMetadata = (show: ShowLike): AppThunk<Promise<Show>> => async (\n  dispatch,\n  getState,\n) => {\n  const { shows } = getState()\n\n  const newShow = await fetchShowMetadataCall(show)\n  const oldShow = showSelector(newShow.id)(shows)\n  if (oldShow !== undefined) newShow.usage = oldShow.usage\n\n  dispatch(updateShow(newShow))\n  return newShow\n}\n\nconst fetchEpisodesMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { episodes } = getState()\n\n  await Promise.all(\n    episodesSelector(episodes).map(async (episode) =>\n      dispatch(fetchEpisodeMetadata(episode.showId, episode.seasonId, episode)),\n    ),\n  )\n}\n\nconst fetchMoviesMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { movies } = getState()\n\n  await Promise.all(\n    moviesSelector(movies).map(async (movie) =>\n      dispatch(fetchMovieMetadata(movie)),\n    ),\n  )\n}\n\nconst fetchSeasonsMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { seasons, shows } = getState()\n\n  await Promise.all(\n    seasonsSelector(seasons).map(async (season) => {\n      const show = showSelector(season.showId)(shows)\n      if (show === undefined) throw new Error('cannot find show for season')\n\n      return dispatch(fetchSeasonMetadata(show, season))\n    }),\n  )\n}\n\nconst fetchShowsMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n  getState,\n) => {\n  const { shows } = getState()\n\n  await Promise.all(\n    showsSelector(shows).map(async (show) => dispatch(fetchShowMetadata(show))),\n  )\n}\n\nexport const fetchAllMetadata = (): AppThunk<Promise<void>> => async (\n  dispatch,\n) => {\n  await dispatch(fetchMoviesMetadata())\n  await dispatch(fetchShowsMetadata())\n  await dispatch(fetchSeasonsMetadata())\n  await dispatch(fetchEpisodesMetadata())\n}\n\nexport const removeProvider = (id: string): AppThunk<void> => (\n  dispatch,\n  getState,\n) => {\n  dispatch(removeProviderAction(id))\n\n  const { episodes, movies } = getState()\n  episodesSelector(episodes).forEach((episode) =>\n    dispatch(episodeRemoveFilesByProvider(episode, id)),\n  )\n  moviesSelector(movies).forEach((movie) =>\n    dispatch(movieRemoveFilesByProvider(movie, id)),\n  )\n}\n","import { addNotification, asyncBegin, asyncEnd } from './actions'\nimport { AppThunk } from '../index'\nimport { handleError } from '../../errors'\n\nexport const load = <ReturnType>(\n  fn: AppThunk<Promise<ReturnType>>,\n): AppThunk<Promise<ReturnType | undefined>> => async (dispatch) => {\n  dispatch(asyncBegin())\n\n  let result: ReturnType | undefined\n  try {\n    result = await dispatch(fn)\n  } catch (error) {\n    if (error instanceof Error) {\n      dispatch(addNotification(handleError(error)))\n    }\n  }\n\n  dispatch(asyncEnd())\n\n  return result\n}\n","import { Notification, NotificationKind } from '../types/Notification'\nimport { APIError } from './APIError'\nimport { AuthenticationFailure } from './AuthenticationFailure'\nimport { CannotFindFileError } from './CannotFindFileError'\nimport { ProviderAlreadyExists } from './ProviderAlreadyExists'\n\nexport const handleError = (error: Error): Notification => {\n  if (error instanceof APIError) {\n    return {\n      kind: NotificationKind.APIError,\n      status: error.status,\n      message: error.message,\n    }\n  } else if (error instanceof AuthenticationFailure) {\n    return {\n      kind: NotificationKind.AuthenticationFailure,\n      provider: error.provider,\n    }\n  } else if (error instanceof CannotFindFileError) {\n    return { kind: NotificationKind.CannotFindFile, file: error.file }\n  } else if (error instanceof ProviderAlreadyExists) {\n    return {\n      kind: NotificationKind.ProviderAlreadyExists,\n      provider: error.provider,\n    }\n  } else {\n    return { kind: NotificationKind.GenericError, error }\n  }\n}\n","export class APIError extends Error {\n  status: number\n\n  constructor(status: number, message: string) {\n    super(message)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, APIError)\n    }\n\n    this.name = 'APIError'\n    this.status = status\n  }\n}\n","import { Provider } from '../types/providers/Provider'\n\nexport class ProviderAlreadyExists extends Error {\n  provider: Provider\n\n  constructor(provider: Provider) {\n    super()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ProviderAlreadyExists)\n    }\n\n    this.name = 'ProviderAlreadyExists'\n    this.provider = provider\n  }\n}\n","import { ProviderKind } from '../types/providers/Provider'\n\nexport class AuthenticationFailure extends Error {\n  provider: ProviderKind\n\n  constructor(provider: ProviderKind) {\n    super()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, AuthenticationFailure)\n    }\n\n    this.name = 'AuthenticationFailure'\n    this.provider = provider\n  }\n}\n","import { EpisodesActionTypes, REMOVE_EPISODE, UPDATE_EPISODE } from './types'\nimport { Episode } from '../../types/items/Episode'\n\nexport const updateEpisode = (episode: Episode): EpisodesActionTypes => ({\n  type: UPDATE_EPISODE,\n  payload: { episode },\n})\n\nexport const removeEpisode = (id: string): EpisodesActionTypes => ({\n  type: REMOVE_EPISODE,\n  payload: { id },\n})\n","import { REMOVE_SEASON, SeasonsActionTypes, UPDATE_SEASON } from './types'\nimport { Season } from '../../types/items/Season'\n\nexport const updateSeason = (season: Season): SeasonsActionTypes => ({\n  type: UPDATE_SEASON,\n  payload: { season },\n})\n\nexport const removeSeason = (id: string): SeasonsActionTypes => ({\n  type: REMOVE_SEASON,\n  payload: { id },\n})\n","import { REMOVE_SHOW, ShowsActionTypes, UPDATE_SHOW } from './types'\nimport { Show } from '../../types/items/Show'\n\nexport const updateShow = (show: Show): ShowsActionTypes => ({\n  type: UPDATE_SHOW,\n  payload: { show },\n})\n\nexport const removeShow = (id: string): ShowsActionTypes => ({\n  type: REMOVE_SHOW,\n  payload: { id },\n})\n","import { File } from '../types/files/File'\n\nexport class CannotFindFileError extends Error {\n  file: File\n\n  constructor(file: File) {\n    super()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CannotFindFileError)\n    }\n\n    this.name = 'CannotFindFileError'\n    this.file = file\n  }\n}\n","import { AppThunk } from '../index'\nimport { Movie } from '../../types/items/Movie'\nimport { Usage } from '../../types/items/Item'\nimport { updateMovie } from './actions'\n\nexport const updateMovieProgress = (\n  movie: Movie,\n  progress: number,\n): AppThunk<void> => (dispatch) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateMovie({ ...movie, usage }))\n}\n\nexport const removeFilesByProvider = (\n  movie: Movie,\n  providerId: string,\n): AppThunk<void> => (dispatch) => {\n  dispatch(\n    updateMovie({\n      ...movie,\n      sources: movie.sources.filter(\n        (source) => source.provider.providerId !== providerId,\n      ),\n      captions: movie.captions.filter(\n        (caption) => caption.provider.providerId !== providerId,\n      ),\n    }),\n  )\n}\n","import { MoviesActionTypes, REMOVE_MOVIE, UPDATE_MOVIE } from './types'\nimport { Movie } from '../../types/items/Movie'\n\nexport const updateMovie = (movie: Movie): MoviesActionTypes => ({\n  type: UPDATE_MOVIE,\n  payload: { movie },\n})\n\nexport const removeMovie = (id: string): MoviesActionTypes => ({\n  type: REMOVE_MOVIE,\n  payload: { id },\n})\n","import { AppThunk } from '../index'\nimport { Season } from '../../types/items/Season'\nimport { Usage } from '../../types/items/Item'\nimport { showSelector } from '../shows/selectors'\nimport { updateSeason } from './actions'\nimport { updateShowProgress } from '../shows/thunks'\n\nexport const updateSeasonProgress = (\n  season: Season,\n  progress: number,\n): AppThunk<void> => (dispatch, getState) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateSeason({ ...season, usage }))\n\n  const { shows } = getState()\n  const show = showSelector(season.showId)(shows)\n  if (show === undefined) throw new Error('parent show of season undefined')\n\n  dispatch(updateShowProgress(show, season.number))\n}\n","import { AppThunk } from '../index'\nimport { Show } from '../../types/items/Show'\nimport { Usage } from '../../types/items/Item'\nimport { updateShow } from './actions'\n\nexport const updateShowProgress = (\n  show: Show,\n  progress: number,\n): AppThunk<void> => (dispatch) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateShow({ ...show, usage }))\n}\n","import { AppThunk } from '../index'\nimport { Episode } from '../../types/items/Episode'\nimport { Usage } from '../../types/items/Item'\nimport { seasonSelector } from '../seasons/selectors'\nimport { updateEpisode } from './actions'\nimport { updateSeasonProgress } from '../seasons/thunks'\n\nexport const updateEpisodeProgress = (\n  episode: Episode,\n  progress: number,\n): AppThunk<void> => (dispatch, getState) => {\n  const usage: Usage = {\n    lastWatched: new Date().toISOString(),\n    progress,\n  }\n  dispatch(updateEpisode({ ...episode, usage }))\n\n  const { seasons } = getState()\n  const season = seasonSelector(episode.seasonId)(seasons)\n  if (season === undefined)\n    throw new Error('parent season of episode undefined')\n\n  dispatch(updateSeasonProgress(season, episode.number))\n}\n\nexport const removeFilesByProvider = (\n  episode: Episode,\n  providerId: string,\n): AppThunk<void> => (dispatch) => {\n  dispatch(\n    updateEpisode({\n      ...episode,\n      sources: episode.sources.filter(\n        (source) => source.provider.providerId !== providerId,\n      ),\n      captions: episode.captions.filter(\n        (caption) => caption.provider.providerId !== providerId,\n      ),\n    }),\n  )\n}\n","import { AuthenticationFailure } from '../../errors/AuthenticationFailure'\nimport { OneDrive } from '../../types/providers/OneDrive'\nimport { OneDriveAuthResponse } from './types'\nimport { ProviderKind } from '../../types/providers/Provider'\nimport { UserAgentApplication } from 'msal'\nimport { buildAuthId } from './util'\n\nconst CLIENT_ID = process.env.REACT_APP_MICROSOFT_CLIENT_ID!\nconst SCOPES = ['user.read', 'files.read.all']\n\nconst buildAuthResponse = (\n  accessToken: string,\n  name: string,\n  expiresOn: Date,\n): OneDriveAuthResponse => ({\n  kind: ProviderKind.OneDrive,\n  accessToken: { token: accessToken, validUntil: expiresOn.toISOString() },\n  id: buildAuthId(ProviderKind.OneDrive, name),\n  name,\n})\n\nconst silentLogIn = async (\n  userAgentApplication: UserAgentApplication,\n): Promise<OneDriveAuthResponse> => {\n  const {\n    accessToken,\n    account,\n    expiresOn,\n  } = await userAgentApplication.acquireTokenSilent({\n    scopes: SCOPES,\n  })\n\n  return buildAuthResponse(accessToken, account.userName, expiresOn)\n}\n\nconst popupLogIn = async (\n  userAgentApplication: UserAgentApplication,\n): Promise<OneDriveAuthResponse> => {\n  await userAgentApplication.loginPopup({\n    scopes: SCOPES,\n    prompt: 'select_account',\n  })\n  const {\n    accessToken,\n    account,\n    expiresOn,\n  } = await userAgentApplication.acquireTokenSilent({\n    scopes: SCOPES,\n  })\n\n  return buildAuthResponse(accessToken, account.userName, expiresOn)\n}\n\nconst performAuth = async (\n  userAgentApplication: UserAgentApplication,\n  allowSilent: boolean,\n): Promise<OneDriveAuthResponse> => {\n  if (!allowSilent) return await popupLogIn(userAgentApplication)\n\n  try {\n    return await silentLogIn(userAgentApplication)\n  } catch (error) {\n    return await popupLogIn(userAgentApplication)\n  }\n}\n\nexport const auth = async (\n  provider: OneDrive | undefined,\n  allowSilent = true,\n): Promise<OneDriveAuthResponse> => {\n  if (\n    provider !== undefined &&\n    new Date(provider.accessToken.validUntil) > new Date()\n  )\n    return provider\n\n  const userAgentApplication = new UserAgentApplication({\n    auth: {\n      clientId: CLIENT_ID,\n    },\n  })\n\n  try {\n    return await performAuth(userAgentApplication, allowSilent)\n  } catch (error) {\n    throw new AuthenticationFailure(ProviderKind.OneDrive)\n  }\n}\n","import { ProviderKind } from '../../types/providers/Provider'\n\nexport const buildAuthId = (kind: ProviderKind, id: string) => `${kind}@${id}`\n","import { Provider, ProviderKind } from '../../types/providers/Provider'\nimport { AppThunk } from '../index'\nimport { AuthResponse } from '../../services/auth/types'\nimport { ProviderAlreadyExists } from '../../errors/ProviderAlreadyExists'\nimport { auth as oneDriveAuthCall } from '../../services/auth/OneDrive'\nimport { providersSelector } from './selectors'\nimport { updateProvider } from './actions'\n\nconst authHandleProvider = (provider: Provider): Promise<AuthResponse> => {\n  switch (provider.kind) {\n    case ProviderKind.OneDrive:\n      return oneDriveAuthCall(provider)\n  }\n}\n\nconst setupAuthHandleProvider = (kind: ProviderKind): Promise<AuthResponse> => {\n  switch (kind) {\n    case ProviderKind.OneDrive:\n      return oneDriveAuthCall(undefined, false)\n  }\n}\n\nexport const auth = (provider: Provider): AppThunk<Promise<Provider>> => async (\n  dispatch,\n) => {\n  const response = await authHandleProvider(provider)\n  const updatedProvider = {\n    ...response,\n    moviesPath: provider.moviesPath,\n    showsPath: provider.showsPath,\n  }\n\n  dispatch(updateProvider(updatedProvider))\n  return updatedProvider\n}\n\nexport const setupAuth = (\n  kind: ProviderKind,\n): AppThunk<Promise<AuthResponse>> => async (_, getState) => {\n  const response = await setupAuthHandleProvider(kind)\n\n  const { auth } = getState()\n  const provider = providersSelector(auth).find(\n    (provider) => provider.kind === kind && provider.name === response.name,\n  )\n  if (provider !== undefined) throw new ProviderAlreadyExists(provider)\n\n  return response\n}\n"],"sourceRoot":""}